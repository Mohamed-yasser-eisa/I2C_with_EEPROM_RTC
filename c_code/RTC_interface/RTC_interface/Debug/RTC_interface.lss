
RTC_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000014d4  00001568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008000e0  008000e0  000015e8  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000015e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  0000226c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00002428  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dab  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c9  00000000  00000000  000043d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a3  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00005e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  00006274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001645  00000000  00000000  00006934  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00007f79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b1 05 	call	0xb62	; 0xb62 <main>
      8a:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_write>:
#include "EEPROM.h"
#include "I2C_Master_H_file.h"


void EEPROM_write(uint8 address_low_byte, uint8 address_high_byte, uint8* buffer_data)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	c8 2f       	mov	r28, r24
      9c:	d6 2f       	mov	r29, r22
      9e:	04 2f       	mov	r16, r20
      a0:	15 2f       	mov	r17, r21
	/* first we send address location to start write from */
	I2C_Start(EEPROM_Slave_Address_Write);
      a2:	80 ea       	ldi	r24, 0xA0	; 160
      a4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <I2C_Start>
	I2C_Write(address_high_byte);
      a8:	8d 2f       	mov	r24, r29
      aa:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Write(address_low_byte);
      ae:	8c 2f       	mov	r24, r28
      b0:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
      b4:	c0 2f       	mov	r28, r16
      b6:	d1 2f       	mov	r29, r17
	/* now we are ready to write data */
	uint8 i=0;
	for (i=0; i<6; i++)
      b8:	10 e0       	ldi	r17, 0x00	; 0
	{
		I2C_Write((uint8)*(buffer_data+i));
      ba:	89 91       	ld	r24, Y+
      bc:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Start(EEPROM_Slave_Address_Write);
	I2C_Write(address_high_byte);
	I2C_Write(address_low_byte);
	/* now we are ready to write data */
	uint8 i=0;
	for (i=0; i<6; i++)
      c0:	1f 5f       	subi	r17, 0xFF	; 255
      c2:	16 30       	cpi	r17, 0x06	; 6
      c4:	d1 f7       	brne	.-12     	; 0xba <EEPROM_write+0x28>
	{
		I2C_Write((uint8)*(buffer_data+i));
	}
	I2C_Stop();
      c6:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
	//address_low_byte+=6;
}
      ca:	df 91       	pop	r29
      cc:	cf 91       	pop	r28
      ce:	1f 91       	pop	r17
      d0:	0f 91       	pop	r16
      d2:	08 95       	ret

000000d4 <EEPROM_Erase_all_data>:

void EEPROM_Erase_all_data(uint8 address_low_byte,uint8 address_high_byte)
{
      d4:	cf 93       	push	r28
      d6:	df 93       	push	r29
      d8:	c8 2f       	mov	r28, r24
      da:	d6 2f       	mov	r29, r22
	/* first we send address location to start write from */
	I2C_Start(EEPROM_Slave_Address_Write);
      dc:	80 ea       	ldi	r24, 0xA0	; 160
      de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <I2C_Start>
	I2C_Write(address_high_byte);
      e2:	8d 2f       	mov	r24, r29
      e4:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Write(address_low_byte);
      e8:	8c 2f       	mov	r24, r28
      ea:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
      ee:	c0 e4       	ldi	r28, 0x40	; 64
	/* now we are ready to write data */
	uint8 i=0;
	for (i=0; i<64; i++) //write 0xFF on one page
	{
		I2C_Write(0xFF);
      f0:	8f ef       	ldi	r24, 0xFF	; 255
      f2:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
      f6:	c1 50       	subi	r28, 0x01	; 1
	I2C_Start(EEPROM_Slave_Address_Write);
	I2C_Write(address_high_byte);
	I2C_Write(address_low_byte);
	/* now we are ready to write data */
	uint8 i=0;
	for (i=0; i<64; i++) //write 0xFF on one page
      f8:	d9 f7       	brne	.-10     	; 0xf0 <EEPROM_Erase_all_data+0x1c>
	{
		I2C_Write(0xFF);
	}
	I2C_Stop();
      fa:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
}
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <EEPROM_read>:


void EEPROM_read(uint8 address_low_byte, uint8 address_high_byte, uint8 *memory_ptr)
{
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	c8 2f       	mov	r28, r24
     110:	06 2f       	mov	r16, r22
     112:	7a 01       	movw	r14, r20
	//address_low_byte-=18;
	I2C_Start(EEPROM_Slave_Address_Write);
     114:	80 ea       	ldi	r24, 0xA0	; 160
     116:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <I2C_Start>
	I2C_Write(address_high_byte);
     11a:	80 2f       	mov	r24, r16
     11c:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Write(address_low_byte);
     120:	8c 2f       	mov	r24, r28
     122:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Repeated_Start(EEPROM_Slave_Address_Read);
     126:	81 ea       	ldi	r24, 0xA1	; 161
     128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <I2C_Repeated_Start>
     12c:	87 01       	movw	r16, r14
	uint8 i=0;
	for (i=0; i<5; i++)
     12e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		*(memory_ptr+i)=I2C_Read_Ack(); /* Read one byte at time */
     130:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     134:	f8 01       	movw	r30, r16
     136:	81 93       	st	Z+, r24
     138:	8f 01       	movw	r16, r30
	I2C_Start(EEPROM_Slave_Address_Write);
	I2C_Write(address_high_byte);
	I2C_Write(address_low_byte);
	I2C_Repeated_Start(EEPROM_Slave_Address_Read);
	uint8 i=0;
	for (i=0; i<5; i++)
     13a:	cf 5f       	subi	r28, 0xFF	; 255
     13c:	c5 30       	cpi	r28, 0x05	; 5
     13e:	c1 f7       	brne	.-16     	; 0x130 <EEPROM_read+0x2c>
	{
		*(memory_ptr+i)=I2C_Read_Ack(); /* Read one byte at time */
	}
	*(memory_ptr+i)=I2C_Read_Nack();
     140:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <I2C_Read_Nack>
     144:	f7 01       	movw	r30, r14
     146:	85 83       	std	Z+5, r24	; 0x05
	I2C_Stop();
     148:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
}
     14c:	cf 91       	pop	r28
     14e:	1f 91       	pop	r17
     150:	0f 91       	pop	r16
     152:	ff 90       	pop	r15
     154:	ef 90       	pop	r14
     156:	08 95       	ret

00000158 <DIO_vsetPINDir>:
#include "Std_macros.h"


void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
     158:	82 34       	cpi	r24, 0x42	; 66
     15a:	51 f1       	breq	.+84     	; 0x1b0 <DIO_vsetPINDir+0x58>
     15c:	83 34       	cpi	r24, 0x43	; 67
     15e:	20 f4       	brcc	.+8      	; 0x168 <DIO_vsetPINDir+0x10>
     160:	81 34       	cpi	r24, 0x41	; 65
     162:	09 f0       	breq	.+2      	; 0x166 <DIO_vsetPINDir+0xe>
     164:	7b c0       	rjmp	.+246    	; 0x25c <DIO_vsetPINDir+0x104>
     166:	07 c0       	rjmp	.+14     	; 0x176 <DIO_vsetPINDir+0x1e>
     168:	83 34       	cpi	r24, 0x43	; 67
     16a:	09 f4       	brne	.+2      	; 0x16e <DIO_vsetPINDir+0x16>
     16c:	3e c0       	rjmp	.+124    	; 0x1ea <DIO_vsetPINDir+0x92>
     16e:	84 34       	cpi	r24, 0x44	; 68
     170:	09 f0       	breq	.+2      	; 0x174 <DIO_vsetPINDir+0x1c>
     172:	74 c0       	rjmp	.+232    	; 0x25c <DIO_vsetPINDir+0x104>
     174:	57 c0       	rjmp	.+174    	; 0x224 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
     176:	41 30       	cpi	r20, 0x01	; 1
     178:	69 f4       	brne	.+26     	; 0x194 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
     17a:	2a b3       	in	r18, 0x1a	; 26
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	ac 01       	movw	r20, r24
     182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_vsetPINDir+0x30>
     184:	44 0f       	add	r20, r20
     186:	55 1f       	adc	r21, r21
     188:	6a 95       	dec	r22
     18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_vsetPINDir+0x2c>
     18c:	ba 01       	movw	r22, r20
     18e:	62 2b       	or	r22, r18
     190:	6a bb       	out	0x1a, r22	; 26
     192:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
     194:	2a b3       	in	r18, 0x1a	; 26
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	ac 01       	movw	r20, r24
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_vsetPINDir+0x4a>
     19e:	44 0f       	add	r20, r20
     1a0:	55 1f       	adc	r21, r21
     1a2:	6a 95       	dec	r22
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_vsetPINDir+0x46>
     1a6:	ba 01       	movw	r22, r20
     1a8:	60 95       	com	r22
     1aa:	62 23       	and	r22, r18
     1ac:	6a bb       	out	0x1a, r22	; 26
     1ae:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
     1b0:	41 30       	cpi	r20, 0x01	; 1
     1b2:	69 f4       	brne	.+26     	; 0x1ce <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
     1b4:	27 b3       	in	r18, 0x17	; 23
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	ac 01       	movw	r20, r24
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_vsetPINDir+0x6a>
     1be:	44 0f       	add	r20, r20
     1c0:	55 1f       	adc	r21, r21
     1c2:	6a 95       	dec	r22
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_vsetPINDir+0x66>
     1c6:	ba 01       	movw	r22, r20
     1c8:	62 2b       	or	r22, r18
     1ca:	67 bb       	out	0x17, r22	; 23
     1cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     1ce:	27 b3       	in	r18, 0x17	; 23
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	ac 01       	movw	r20, r24
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_vsetPINDir+0x84>
     1d8:	44 0f       	add	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	6a 95       	dec	r22
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_vsetPINDir+0x80>
     1e0:	ba 01       	movw	r22, r20
     1e2:	60 95       	com	r22
     1e4:	62 23       	and	r22, r18
     1e6:	67 bb       	out	0x17, r22	; 23
     1e8:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     1ea:	41 30       	cpi	r20, 0x01	; 1
     1ec:	69 f4       	brne	.+26     	; 0x208 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     1ee:	24 b3       	in	r18, 0x14	; 20
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	ac 01       	movw	r20, r24
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_vsetPINDir+0xa4>
     1f8:	44 0f       	add	r20, r20
     1fa:	55 1f       	adc	r21, r21
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_vsetPINDir+0xa0>
     200:	ba 01       	movw	r22, r20
     202:	62 2b       	or	r22, r18
     204:	64 bb       	out	0x14, r22	; 20
     206:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     208:	24 b3       	in	r18, 0x14	; 20
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	ac 01       	movw	r20, r24
     210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_vsetPINDir+0xbe>
     212:	44 0f       	add	r20, r20
     214:	55 1f       	adc	r21, r21
     216:	6a 95       	dec	r22
     218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_vsetPINDir+0xba>
     21a:	ba 01       	movw	r22, r20
     21c:	60 95       	com	r22
     21e:	62 23       	and	r22, r18
     220:	64 bb       	out	0x14, r22	; 20
     222:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     224:	41 30       	cpi	r20, 0x01	; 1
     226:	69 f4       	brne	.+26     	; 0x242 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     228:	21 b3       	in	r18, 0x11	; 17
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	ac 01       	movw	r20, r24
     230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_vsetPINDir+0xde>
     232:	44 0f       	add	r20, r20
     234:	55 1f       	adc	r21, r21
     236:	6a 95       	dec	r22
     238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_vsetPINDir+0xda>
     23a:	ba 01       	movw	r22, r20
     23c:	62 2b       	or	r22, r18
     23e:	61 bb       	out	0x11, r22	; 17
     240:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     242:	21 b3       	in	r18, 0x11	; 17
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	ac 01       	movw	r20, r24
     24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_vsetPINDir+0xf8>
     24c:	44 0f       	add	r20, r20
     24e:	55 1f       	adc	r21, r21
     250:	6a 95       	dec	r22
     252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_vsetPINDir+0xf4>
     254:	ba 01       	movw	r22, r20
     256:	60 95       	com	r22
     258:	62 23       	and	r22, r18
     25a:	61 bb       	out	0x11, r22	; 17
     25c:	08 95       	ret

0000025e <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     25e:	82 34       	cpi	r24, 0x42	; 66
     260:	51 f1       	breq	.+84     	; 0x2b6 <DIO_write+0x58>
     262:	83 34       	cpi	r24, 0x43	; 67
     264:	20 f4       	brcc	.+8      	; 0x26e <DIO_write+0x10>
     266:	81 34       	cpi	r24, 0x41	; 65
     268:	09 f0       	breq	.+2      	; 0x26c <DIO_write+0xe>
     26a:	7b c0       	rjmp	.+246    	; 0x362 <DIO_write+0x104>
     26c:	07 c0       	rjmp	.+14     	; 0x27c <DIO_write+0x1e>
     26e:	83 34       	cpi	r24, 0x43	; 67
     270:	09 f4       	brne	.+2      	; 0x274 <DIO_write+0x16>
     272:	3e c0       	rjmp	.+124    	; 0x2f0 <DIO_write+0x92>
     274:	84 34       	cpi	r24, 0x44	; 68
     276:	09 f0       	breq	.+2      	; 0x27a <DIO_write+0x1c>
     278:	74 c0       	rjmp	.+232    	; 0x362 <DIO_write+0x104>
     27a:	57 c0       	rjmp	.+174    	; 0x32a <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
     27c:	41 30       	cpi	r20, 0x01	; 1
     27e:	69 f4       	brne	.+26     	; 0x29a <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     280:	2b b3       	in	r18, 0x1b	; 27
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_write+0x30>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_write+0x2c>
     292:	ba 01       	movw	r22, r20
     294:	62 2b       	or	r22, r18
     296:	6b bb       	out	0x1b, r22	; 27
     298:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     29a:	2b b3       	in	r18, 0x1b	; 27
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	ac 01       	movw	r20, r24
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_write+0x4a>
     2a4:	44 0f       	add	r20, r20
     2a6:	55 1f       	adc	r21, r21
     2a8:	6a 95       	dec	r22
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_write+0x46>
     2ac:	ba 01       	movw	r22, r20
     2ae:	60 95       	com	r22
     2b0:	62 23       	and	r22, r18
     2b2:	6b bb       	out	0x1b, r22	; 27
     2b4:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     2b6:	41 30       	cpi	r20, 0x01	; 1
     2b8:	69 f4       	brne	.+26     	; 0x2d4 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     2ba:	28 b3       	in	r18, 0x18	; 24
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x6a>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x66>
     2cc:	ba 01       	movw	r22, r20
     2ce:	62 2b       	or	r22, r18
     2d0:	68 bb       	out	0x18, r22	; 24
     2d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     2d4:	28 b3       	in	r18, 0x18	; 24
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	ac 01       	movw	r20, r24
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_write+0x84>
     2de:	44 0f       	add	r20, r20
     2e0:	55 1f       	adc	r21, r21
     2e2:	6a 95       	dec	r22
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_write+0x80>
     2e6:	ba 01       	movw	r22, r20
     2e8:	60 95       	com	r22
     2ea:	62 23       	and	r22, r18
     2ec:	68 bb       	out	0x18, r22	; 24
     2ee:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     2f0:	41 30       	cpi	r20, 0x01	; 1
     2f2:	69 f4       	brne	.+26     	; 0x30e <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     2f4:	25 b3       	in	r18, 0x15	; 21
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	ac 01       	movw	r20, r24
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_write+0xa4>
     2fe:	44 0f       	add	r20, r20
     300:	55 1f       	adc	r21, r21
     302:	6a 95       	dec	r22
     304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_write+0xa0>
     306:	ba 01       	movw	r22, r20
     308:	62 2b       	or	r22, r18
     30a:	65 bb       	out	0x15, r22	; 21
     30c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     30e:	25 b3       	in	r18, 0x15	; 21
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	ac 01       	movw	r20, r24
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_write+0xbe>
     318:	44 0f       	add	r20, r20
     31a:	55 1f       	adc	r21, r21
     31c:	6a 95       	dec	r22
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_write+0xba>
     320:	ba 01       	movw	r22, r20
     322:	60 95       	com	r22
     324:	62 23       	and	r22, r18
     326:	65 bb       	out	0x15, r22	; 21
     328:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     32a:	41 30       	cpi	r20, 0x01	; 1
     32c:	69 f4       	brne	.+26     	; 0x348 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     32e:	22 b3       	in	r18, 0x12	; 18
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	ac 01       	movw	r20, r24
     336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_write+0xde>
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	6a 95       	dec	r22
     33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_write+0xda>
     340:	ba 01       	movw	r22, r20
     342:	62 2b       	or	r22, r18
     344:	62 bb       	out	0x12, r22	; 18
     346:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     348:	22 b3       	in	r18, 0x12	; 18
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	ac 01       	movw	r20, r24
     350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_write+0xf8>
     352:	44 0f       	add	r20, r20
     354:	55 1f       	adc	r21, r21
     356:	6a 95       	dec	r22
     358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_write+0xf4>
     35a:	ba 01       	movw	r22, r20
     35c:	60 95       	com	r22
     35e:	62 23       	and	r22, r18
     360:	62 bb       	out	0x12, r22	; 18
     362:	08 95       	ret

00000364 <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     364:	82 34       	cpi	r24, 0x42	; 66
     366:	f1 f0       	breq	.+60     	; 0x3a4 <DIO_u8read+0x40>
     368:	83 34       	cpi	r24, 0x43	; 67
     36a:	20 f4       	brcc	.+8      	; 0x374 <DIO_u8read+0x10>
     36c:	81 34       	cpi	r24, 0x41	; 65
     36e:	09 f0       	breq	.+2      	; 0x372 <DIO_u8read+0xe>
     370:	4f c0       	rjmp	.+158    	; 0x410 <DIO_u8read+0xac>
     372:	06 c0       	rjmp	.+12     	; 0x380 <DIO_u8read+0x1c>
     374:	83 34       	cpi	r24, 0x43	; 67
     376:	41 f1       	breq	.+80     	; 0x3c8 <DIO_u8read+0x64>
     378:	84 34       	cpi	r24, 0x44	; 68
     37a:	09 f0       	breq	.+2      	; 0x37e <DIO_u8read+0x1a>
     37c:	49 c0       	rjmp	.+146    	; 0x410 <DIO_u8read+0xac>
     37e:	36 c0       	rjmp	.+108    	; 0x3ec <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     380:	29 b3       	in	r18, 0x19	; 25
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	06 2e       	mov	r0, r22
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_u8read+0x2a>
     38a:	88 0f       	add	r24, r24
     38c:	99 1f       	adc	r25, r25
     38e:	0a 94       	dec	r0
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_u8read+0x26>
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	82 23       	and	r24, r18
     396:	93 23       	and	r25, r19
     398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_u8read+0x3a>
     39a:	95 95       	asr	r25
     39c:	87 95       	ror	r24
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_u8read+0x36>
		break;
     3a2:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     3a4:	26 b3       	in	r18, 0x16	; 22
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	06 2e       	mov	r0, r22
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_u8read+0x4e>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_u8read+0x4a>
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	82 23       	and	r24, r18
     3ba:	93 23       	and	r25, r19
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8read+0x5e>
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8read+0x5a>
		break;
     3c6:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     3c8:	23 b3       	in	r18, 0x13	; 19
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	06 2e       	mov	r0, r22
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_u8read+0x72>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_u8read+0x6e>
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	82 23       	and	r24, r18
     3de:	93 23       	and	r25, r19
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8read+0x82>
     3e2:	95 95       	asr	r25
     3e4:	87 95       	ror	r24
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_u8read+0x7e>
		break;
     3ea:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     3ec:	20 b3       	in	r18, 0x10	; 16
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	06 2e       	mov	r0, r22
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_u8read+0x96>
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	0a 94       	dec	r0
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_u8read+0x92>
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	82 23       	and	r24, r18
     402:	93 23       	and	r25, r19
     404:	02 c0       	rjmp	.+4      	; 0x40a <DIO_u8read+0xa6>
     406:	95 95       	asr	r25
     408:	87 95       	ror	r24
     40a:	6a 95       	dec	r22
     40c:	e2 f7       	brpl	.-8      	; 0x406 <DIO_u8read+0xa2>
		break;
     40e:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     410:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value ;
}
     412:	08 95       	ret

00000414 <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     414:	82 34       	cpi	r24, 0x42	; 66
     416:	b9 f0       	breq	.+46     	; 0x446 <DIO_toggle+0x32>
     418:	83 34       	cpi	r24, 0x43	; 67
     41a:	18 f4       	brcc	.+6      	; 0x422 <DIO_toggle+0xe>
     41c:	81 34       	cpi	r24, 0x41	; 65
     41e:	c9 f5       	brne	.+114    	; 0x492 <__stack+0x33>
     420:	05 c0       	rjmp	.+10     	; 0x42c <DIO_toggle+0x18>
     422:	83 34       	cpi	r24, 0x43	; 67
     424:	e9 f0       	breq	.+58     	; 0x460 <__stack+0x1>
     426:	84 34       	cpi	r24, 0x44	; 68
     428:	a1 f5       	brne	.+104    	; 0x492 <__stack+0x33>
     42a:	27 c0       	rjmp	.+78     	; 0x47a <__stack+0x1b>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     42c:	2b b3       	in	r18, 0x1b	; 27
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	ac 01       	movw	r20, r24
     434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_toggle+0x26>
     436:	44 0f       	add	r20, r20
     438:	55 1f       	adc	r21, r21
     43a:	6a 95       	dec	r22
     43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_toggle+0x22>
     43e:	ba 01       	movw	r22, r20
     440:	62 27       	eor	r22, r18
     442:	6b bb       	out	0x1b, r22	; 27
		break;
     444:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     446:	28 b3       	in	r18, 0x18	; 24
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	ac 01       	movw	r20, r24
     44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_toggle+0x40>
     450:	44 0f       	add	r20, r20
     452:	55 1f       	adc	r21, r21
     454:	6a 95       	dec	r22
     456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_toggle+0x3c>
     458:	ba 01       	movw	r22, r20
     45a:	62 27       	eor	r22, r18
     45c:	68 bb       	out	0x18, r22	; 24
		break;
     45e:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     460:	25 b3       	in	r18, 0x15	; 21
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	ac 01       	movw	r20, r24
     468:	02 c0       	rjmp	.+4      	; 0x46e <__stack+0xf>
     46a:	44 0f       	add	r20, r20
     46c:	55 1f       	adc	r21, r21
     46e:	6a 95       	dec	r22
     470:	e2 f7       	brpl	.-8      	; 0x46a <__stack+0xb>
     472:	ba 01       	movw	r22, r20
     474:	62 27       	eor	r22, r18
     476:	65 bb       	out	0x15, r22	; 21
		break;
     478:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     47a:	22 b3       	in	r18, 0x12	; 18
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	ac 01       	movw	r20, r24
     482:	02 c0       	rjmp	.+4      	; 0x488 <__stack+0x29>
     484:	44 0f       	add	r20, r20
     486:	55 1f       	adc	r21, r21
     488:	6a 95       	dec	r22
     48a:	e2 f7       	brpl	.-8      	; 0x484 <__stack+0x25>
     48c:	ba 01       	movw	r22, r20
     48e:	62 27       	eor	r22, r18
     490:	62 bb       	out	0x12, r22	; 18
     492:	08 95       	ret

00000494 <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     494:	82 34       	cpi	r24, 0x42	; 66
     496:	61 f0       	breq	.+24     	; 0x4b0 <DIO_set_port_direction+0x1c>
     498:	83 34       	cpi	r24, 0x43	; 67
     49a:	18 f4       	brcc	.+6      	; 0x4a2 <DIO_set_port_direction+0xe>
     49c:	81 34       	cpi	r24, 0x41	; 65
     49e:	69 f4       	brne	.+26     	; 0x4ba <DIO_set_port_direction+0x26>
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <DIO_set_port_direction+0x18>
     4a2:	83 34       	cpi	r24, 0x43	; 67
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <DIO_set_port_direction+0x20>
     4a6:	84 34       	cpi	r24, 0x44	; 68
     4a8:	41 f4       	brne	.+16     	; 0x4ba <DIO_set_port_direction+0x26>
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     4ac:	6a bb       	out	0x1a, r22	; 26
		break ;
     4ae:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     4b0:	67 bb       	out	0x17, r22	; 23
		break ;
     4b2:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     4b4:	64 bb       	out	0x14, r22	; 20
		break ;
     4b6:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     4b8:	61 bb       	out	0x11, r22	; 17
     4ba:	08 95       	ret

000004bc <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     4bc:	82 34       	cpi	r24, 0x42	; 66
     4be:	61 f0       	breq	.+24     	; 0x4d8 <DIO_write_port+0x1c>
     4c0:	83 34       	cpi	r24, 0x43	; 67
     4c2:	18 f4       	brcc	.+6      	; 0x4ca <DIO_write_port+0xe>
     4c4:	81 34       	cpi	r24, 0x41	; 65
     4c6:	69 f4       	brne	.+26     	; 0x4e2 <DIO_write_port+0x26>
     4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <DIO_write_port+0x18>
     4ca:	83 34       	cpi	r24, 0x43	; 67
     4cc:	39 f0       	breq	.+14     	; 0x4dc <DIO_write_port+0x20>
     4ce:	84 34       	cpi	r24, 0x44	; 68
     4d0:	41 f4       	brne	.+16     	; 0x4e2 <DIO_write_port+0x26>
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     4d4:	6b bb       	out	0x1b, r22	; 27
		break ;
     4d6:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     4d8:	68 bb       	out	0x18, r22	; 24
		break ;
     4da:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     4dc:	65 bb       	out	0x15, r22	; 21
		break ;
     4de:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     4e0:	62 bb       	out	0x12, r22	; 18
     4e2:	08 95       	ret

000004e4 <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     4e4:	82 34       	cpi	r24, 0x42	; 66
     4e6:	61 f0       	breq	.+24     	; 0x500 <DIO_read_port+0x1c>
     4e8:	83 34       	cpi	r24, 0x43	; 67
     4ea:	18 f4       	brcc	.+6      	; 0x4f2 <DIO_read_port+0xe>
     4ec:	81 34       	cpi	r24, 0x41	; 65
     4ee:	71 f4       	brne	.+28     	; 0x50c <DIO_read_port+0x28>
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <DIO_read_port+0x18>
     4f2:	83 34       	cpi	r24, 0x43	; 67
     4f4:	39 f0       	breq	.+14     	; 0x504 <DIO_read_port+0x20>
     4f6:	84 34       	cpi	r24, 0x44	; 68
     4f8:	49 f4       	brne	.+18     	; 0x50c <DIO_read_port+0x28>
     4fa:	06 c0       	rjmp	.+12     	; 0x508 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A
     4fc:	89 b3       	in	r24, 0x19	; 25
		break ;
     4fe:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B
     500:	86 b3       	in	r24, 0x16	; 22
		break ;
     502:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C
     504:	83 b3       	in	r24, 0x13	; 19
		break ;
     506:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D
     508:	80 b3       	in	r24, 0x10	; 16
		break ;
     50a:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     50c:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     50e:	08 95       	ret

00000510 <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     510:	82 34       	cpi	r24, 0x42	; 66
     512:	51 f1       	breq	.+84     	; 0x568 <DIO_vconnectpullup+0x58>
     514:	83 34       	cpi	r24, 0x43	; 67
     516:	20 f4       	brcc	.+8      	; 0x520 <DIO_vconnectpullup+0x10>
     518:	81 34       	cpi	r24, 0x41	; 65
     51a:	09 f0       	breq	.+2      	; 0x51e <DIO_vconnectpullup+0xe>
     51c:	7b c0       	rjmp	.+246    	; 0x614 <DIO_vconnectpullup+0x104>
     51e:	07 c0       	rjmp	.+14     	; 0x52e <DIO_vconnectpullup+0x1e>
     520:	83 34       	cpi	r24, 0x43	; 67
     522:	09 f4       	brne	.+2      	; 0x526 <DIO_vconnectpullup+0x16>
     524:	3e c0       	rjmp	.+124    	; 0x5a2 <DIO_vconnectpullup+0x92>
     526:	84 34       	cpi	r24, 0x44	; 68
     528:	09 f0       	breq	.+2      	; 0x52c <DIO_vconnectpullup+0x1c>
     52a:	74 c0       	rjmp	.+232    	; 0x614 <DIO_vconnectpullup+0x104>
     52c:	57 c0       	rjmp	.+174    	; 0x5dc <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     52e:	41 30       	cpi	r20, 0x01	; 1
     530:	69 f4       	brne	.+26     	; 0x54c <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     532:	2b b3       	in	r18, 0x1b	; 27
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	ac 01       	movw	r20, r24
     53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_vconnectpullup+0x30>
     53c:	44 0f       	add	r20, r20
     53e:	55 1f       	adc	r21, r21
     540:	6a 95       	dec	r22
     542:	e2 f7       	brpl	.-8      	; 0x53c <DIO_vconnectpullup+0x2c>
     544:	ba 01       	movw	r22, r20
     546:	62 2b       	or	r22, r18
     548:	6b bb       	out	0x1b, r22	; 27
     54a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     54c:	2b b3       	in	r18, 0x1b	; 27
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	ac 01       	movw	r20, r24
     554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_vconnectpullup+0x4a>
     556:	44 0f       	add	r20, r20
     558:	55 1f       	adc	r21, r21
     55a:	6a 95       	dec	r22
     55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_vconnectpullup+0x46>
     55e:	ba 01       	movw	r22, r20
     560:	60 95       	com	r22
     562:	62 23       	and	r22, r18
     564:	6b bb       	out	0x1b, r22	; 27
     566:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     568:	41 30       	cpi	r20, 0x01	; 1
     56a:	69 f4       	brne	.+26     	; 0x586 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
     56c:	28 b3       	in	r18, 0x18	; 24
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	ac 01       	movw	r20, r24
     574:	02 c0       	rjmp	.+4      	; 0x57a <DIO_vconnectpullup+0x6a>
     576:	44 0f       	add	r20, r20
     578:	55 1f       	adc	r21, r21
     57a:	6a 95       	dec	r22
     57c:	e2 f7       	brpl	.-8      	; 0x576 <DIO_vconnectpullup+0x66>
     57e:	ba 01       	movw	r22, r20
     580:	62 2b       	or	r22, r18
     582:	68 bb       	out	0x18, r22	; 24
     584:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     586:	28 b3       	in	r18, 0x18	; 24
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	ac 01       	movw	r20, r24
     58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_vconnectpullup+0x84>
     590:	44 0f       	add	r20, r20
     592:	55 1f       	adc	r21, r21
     594:	6a 95       	dec	r22
     596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_vconnectpullup+0x80>
     598:	ba 01       	movw	r22, r20
     59a:	60 95       	com	r22
     59c:	62 23       	and	r22, r18
     59e:	68 bb       	out	0x18, r22	; 24
     5a0:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     5a2:	41 30       	cpi	r20, 0x01	; 1
     5a4:	69 f4       	brne	.+26     	; 0x5c0 <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
     5a6:	25 b3       	in	r18, 0x15	; 21
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_vconnectpullup+0xa4>
     5b0:	44 0f       	add	r20, r20
     5b2:	55 1f       	adc	r21, r21
     5b4:	6a 95       	dec	r22
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_vconnectpullup+0xa0>
     5b8:	ba 01       	movw	r22, r20
     5ba:	62 2b       	or	r22, r18
     5bc:	65 bb       	out	0x15, r22	; 21
     5be:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     5c0:	25 b3       	in	r18, 0x15	; 21
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	ac 01       	movw	r20, r24
     5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_vconnectpullup+0xbe>
     5ca:	44 0f       	add	r20, r20
     5cc:	55 1f       	adc	r21, r21
     5ce:	6a 95       	dec	r22
     5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_vconnectpullup+0xba>
     5d2:	ba 01       	movw	r22, r20
     5d4:	60 95       	com	r22
     5d6:	62 23       	and	r22, r18
     5d8:	65 bb       	out	0x15, r22	; 21
     5da:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     5dc:	41 30       	cpi	r20, 0x01	; 1
     5de:	69 f4       	brne	.+26     	; 0x5fa <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
     5e0:	22 b3       	in	r18, 0x12	; 18
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	ac 01       	movw	r20, r24
     5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_vconnectpullup+0xde>
     5ea:	44 0f       	add	r20, r20
     5ec:	55 1f       	adc	r21, r21
     5ee:	6a 95       	dec	r22
     5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_vconnectpullup+0xda>
     5f2:	ba 01       	movw	r22, r20
     5f4:	62 2b       	or	r22, r18
     5f6:	62 bb       	out	0x12, r22	; 18
     5f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     5fa:	22 b3       	in	r18, 0x12	; 18
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	ac 01       	movw	r20, r24
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_vconnectpullup+0xf8>
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_vconnectpullup+0xf4>
     60c:	ba 01       	movw	r22, r20
     60e:	60 95       	com	r22
     610:	62 23       	and	r22, r18
     612:	62 bb       	out	0x12, r22	; 18
     614:	08 95       	ret

00000616 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     616:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     618:	82 34       	cpi	r24, 0x42	; 66
     61a:	81 f0       	breq	.+32     	; 0x63c <write_low_nibble+0x26>
     61c:	83 34       	cpi	r24, 0x43	; 67
     61e:	18 f4       	brcc	.+6      	; 0x626 <write_low_nibble+0x10>
     620:	81 34       	cpi	r24, 0x41	; 65
     622:	f1 f4       	brne	.+60     	; 0x660 <write_low_nibble+0x4a>
     624:	05 c0       	rjmp	.+10     	; 0x630 <write_low_nibble+0x1a>
     626:	83 34       	cpi	r24, 0x43	; 67
     628:	79 f0       	breq	.+30     	; 0x648 <write_low_nibble+0x32>
     62a:	84 34       	cpi	r24, 0x44	; 68
     62c:	c9 f4       	brne	.+50     	; 0x660 <write_low_nibble+0x4a>
     62e:	12 c0       	rjmp	.+36     	; 0x654 <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     630:	8b b3       	in	r24, 0x1b	; 27
     632:	80 7f       	andi	r24, 0xF0	; 240
     634:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     636:	8b b3       	in	r24, 0x1b	; 27
     638:	86 2b       	or	r24, r22
     63a:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     63c:	88 b3       	in	r24, 0x18	; 24
     63e:	80 7f       	andi	r24, 0xF0	; 240
     640:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     642:	88 b3       	in	r24, 0x18	; 24
     644:	86 2b       	or	r24, r22
     646:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     648:	85 b3       	in	r24, 0x15	; 21
     64a:	80 7f       	andi	r24, 0xF0	; 240
     64c:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     64e:	85 b3       	in	r24, 0x15	; 21
     650:	86 2b       	or	r24, r22
     652:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     654:	82 b3       	in	r24, 0x12	; 18
     656:	80 7f       	andi	r24, 0xF0	; 240
     658:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     65a:	82 b3       	in	r24, 0x12	; 18
     65c:	68 2b       	or	r22, r24
     65e:	62 bb       	out	0x12, r22	; 18
     660:	08 95       	ret

00000662 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     662:	62 95       	swap	r22
     664:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     666:	82 34       	cpi	r24, 0x42	; 66
     668:	81 f0       	breq	.+32     	; 0x68a <write_high_nibble+0x28>
     66a:	83 34       	cpi	r24, 0x43	; 67
     66c:	18 f4       	brcc	.+6      	; 0x674 <write_high_nibble+0x12>
     66e:	81 34       	cpi	r24, 0x41	; 65
     670:	f1 f4       	brne	.+60     	; 0x6ae <write_high_nibble+0x4c>
     672:	05 c0       	rjmp	.+10     	; 0x67e <write_high_nibble+0x1c>
     674:	83 34       	cpi	r24, 0x43	; 67
     676:	79 f0       	breq	.+30     	; 0x696 <write_high_nibble+0x34>
     678:	84 34       	cpi	r24, 0x44	; 68
     67a:	c9 f4       	brne	.+50     	; 0x6ae <write_high_nibble+0x4c>
     67c:	12 c0       	rjmp	.+36     	; 0x6a2 <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     67e:	8b b3       	in	r24, 0x1b	; 27
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     684:	8b b3       	in	r24, 0x1b	; 27
     686:	86 2b       	or	r24, r22
     688:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     68a:	88 b3       	in	r24, 0x18	; 24
     68c:	8f 70       	andi	r24, 0x0F	; 15
     68e:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     690:	88 b3       	in	r24, 0x18	; 24
     692:	86 2b       	or	r24, r22
     694:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     696:	85 b3       	in	r24, 0x15	; 21
     698:	8f 70       	andi	r24, 0x0F	; 15
     69a:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     69c:	85 b3       	in	r24, 0x15	; 21
     69e:	86 2b       	or	r24, r22
     6a0:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     6a2:	82 b3       	in	r24, 0x12	; 18
     6a4:	8f 70       	andi	r24, 0x0F	; 15
     6a6:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     6a8:	82 b3       	in	r24, 0x12	; 18
     6aa:	68 2b       	or	r22, r24
     6ac:	62 bb       	out	0x12, r22	; 18
     6ae:	08 95       	ret

000006b0 <I2C_Init>:

#include "I2C_Master_H_file.h"								/* Include I2C header file */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
     6b0:	11 b8       	out	0x01, r1	; 1
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	80 b9       	out	0x00, r24	; 0
}	
     6b6:	08 95       	ret

000006b8 <I2C_Start>:

/* this function sends start condition */
uint8_t I2C_Start(char write_address)						/* I2C start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     6b8:	94 ea       	ldi	r25, 0xA4	; 164
     6ba:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     6bc:	06 b6       	in	r0, 0x36	; 54
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <I2C_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     6c2:	91 b1       	in	r25, 0x01	; 1
     6c4:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     6c6:	98 30       	cpi	r25, 0x08	; 8
     6c8:	71 f4       	brne	.+28     	; 0x6e6 <I2C_Start+0x2e>
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
     6ca:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     6cc:	84 e8       	ldi	r24, 0x84	; 132
     6ce:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     6d0:	06 b6       	in	r0, 0x36	; 54
     6d2:	07 fe       	sbrs	r0, 7
     6d4:	fd cf       	rjmp	.-6      	; 0x6d0 <I2C_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     6d6:	81 b1       	in	r24, 0x01	; 1
     6d8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     6da:	88 31       	cpi	r24, 0x18	; 24
     6dc:	31 f0       	breq	.+12     	; 0x6ea <I2C_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     6de:	80 32       	cpi	r24, 0x20	; 32
     6e0:	31 f4       	brne	.+12     	; 0x6ee <I2C_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
	return 0;												/* If not then return 0 to indicate start condition fail */
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     6ee:	83 e0       	ldi	r24, 0x03	; 3
}
     6f0:	08 95       	ret

000006f2 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     6f2:	94 ea       	ldi	r25, 0xA4	; 164
     6f4:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     6f6:	06 b6       	in	r0, 0x36	; 54
     6f8:	07 fe       	sbrs	r0, 7
     6fa:	fd cf       	rjmp	.-6      	; 0x6f6 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     6fc:	91 b1       	in	r25, 0x01	; 1
     6fe:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     700:	90 31       	cpi	r25, 0x10	; 16
     702:	71 f4       	brne	.+28     	; 0x720 <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
     704:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     706:	84 e8       	ldi	r24, 0x84	; 132
     708:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     70a:	06 b6       	in	r0, 0x36	; 54
     70c:	07 fe       	sbrs	r0, 7
     70e:	fd cf       	rjmp	.-6      	; 0x70a <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     710:	81 b1       	in	r24, 0x01	; 1
     712:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     714:	80 34       	cpi	r24, 0x40	; 64
     716:	31 f0       	breq	.+12     	; 0x724 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     718:	80 32       	cpi	r24, 0x20	; 32
     71a:	31 f4       	brne	.+12     	; 0x728 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	08 95       	ret
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     728:	83 e0       	ldi	r24, 0x03	; 3
}
     72a:	08 95       	ret

0000072c <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     72c:	84 e9       	ldi	r24, 0x94	; 148
     72e:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     730:	06 b6       	in	r0, 0x36	; 54
     732:	04 fc       	sbrc	r0, 4
     734:	fd cf       	rjmp	.-6      	; 0x730 <I2C_Stop+0x4>
}
     736:	08 95       	ret

00000738 <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	18 2f       	mov	r17, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     740:	c4 ea       	ldi	r28, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     742:	d4 e8       	ldi	r29, 0x84	; 132
void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     744:	c6 bf       	out	0x36, r28	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     746:	06 b6       	in	r0, 0x36	; 54
     748:	07 fe       	sbrs	r0, 7
     74a:	fd cf       	rjmp	.-6      	; 0x746 <I2C_Start_Wait+0xe>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     74c:	81 b1       	in	r24, 0x01	; 1
     74e:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	c1 f7       	brne	.-16     	; 0x744 <I2C_Start_Wait+0xc>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
     754:	13 b9       	out	0x03, r17	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     756:	d6 bf       	out	0x36, r29	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     758:	06 b6       	in	r0, 0x36	; 54
     75a:	07 fe       	sbrs	r0, 7
     75c:	fd cf       	rjmp	.-6      	; 0x758 <I2C_Start_Wait+0x20>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     75e:	81 b1       	in	r24, 0x01	; 1
     760:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     762:	88 31       	cpi	r24, 0x18	; 24
     764:	19 f0       	breq	.+6      	; 0x76c <I2C_Start_Wait+0x34>
		{
			I2C_Stop();										/* If not then generate stop condition */
     766:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
			continue;										/* continue with start loop again */
     76a:	ec cf       	rjmp	.-40     	; 0x744 <I2C_Start_Wait+0xc>
		}
		break;												/* If yes then break loop */
	}
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	08 95       	ret

00000774 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     774:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     776:	84 e8       	ldi	r24, 0x84	; 132
     778:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     77a:	06 b6       	in	r0, 0x36	; 54
     77c:	07 fe       	sbrs	r0, 7
     77e:	fd cf       	rjmp	.-6      	; 0x77a <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     780:	81 b1       	in	r24, 0x01	; 1
     782:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     784:	88 32       	cpi	r24, 0x28	; 40
     786:	21 f0       	breq	.+8      	; 0x790 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     788:	80 33       	cpi	r24, 0x30	; 48
     78a:	21 f4       	brne	.+8      	; 0x794 <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     794:	82 e0       	ldi	r24, 0x02	; 2
}
     796:	08 95       	ret

00000798 <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     798:	84 ec       	ldi	r24, 0xC4	; 196
     79a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     79c:	06 b6       	in	r0, 0x36	; 54
     79e:	07 fe       	sbrs	r0, 7
     7a0:	fd cf       	rjmp	.-6      	; 0x79c <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     7a2:	83 b1       	in	r24, 0x03	; 3
}	
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	08 95       	ret

000007a8 <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     7a8:	84 e8       	ldi	r24, 0x84	; 132
     7aa:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     7ac:	06 b6       	in	r0, 0x36	; 54
     7ae:	07 fe       	sbrs	r0, 7
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     7b2:	83 b1       	in	r24, 0x03	; 3
}	
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret

000007b8 <keypad_vInit>:
#include "Keypad.h"

 
 void keypad_vInit()
 {
	 DIO_vsetPINDir('C',4,1);
     7b8:	83 e4       	ldi	r24, 0x43	; 67
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',5,1);
     7c2:	83 e4       	ldi	r24, 0x43	; 67
     7c4:	65 e0       	ldi	r22, 0x05	; 5
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',6,1);
     7cc:	83 e4       	ldi	r24, 0x43	; 67
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('C',7,1);
     7d6:	83 e4       	ldi	r24, 0x43	; 67
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
     7e0:	84 e4       	ldi	r24, 0x44	; 68
     7e2:	64 e0       	ldi	r22, 0x04	; 4
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
     7ea:	84 e4       	ldi	r24, 0x44	; 68
     7ec:	65 e0       	ldi	r22, 0x05	; 5
     7ee:	40 e0       	ldi	r20, 0x00	; 0
     7f0:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
     7f4:	84 e4       	ldi	r24, 0x44	; 68
     7f6:	66 e0       	ldi	r22, 0x06	; 6
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
     7fe:	84 e4       	ldi	r24, 0x44	; 68
     800:	67 e0       	ldi	r22, 0x07	; 7
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
 }
     808:	08 95       	ret

0000080a <keypad_u8check_press>:
 char keypad_u8check_press()
 {
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
     816:	60 97       	sbiw	r28, 0x10	; 16
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
	 uint8 arr[4][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
     822:	de 01       	movw	r26, r28
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	e0 e6       	ldi	r30, 0x60	; 96
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	01 90       	ld	r0, Z+
     82e:	0d 92       	st	X+, r0
     830:	81 50       	subi	r24, 0x01	; 1
     832:	e1 f7       	brne	.-8      	; 0x82c <keypad_u8check_press+0x22>
	 uint8 row,coloumn,x;
	 uint8 returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     834:	00 e0       	ldi	r16, 0x00	; 0
	 {
	 DIO_write('C',4,1);
     836:	83 e4       	ldi	r24, 0x43	; 67
     838:	64 e0       	ldi	r22, 0x04	; 4
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	 DIO_write('C',5,1);
     840:	83 e4       	ldi	r24, 0x43	; 67
     842:	65 e0       	ldi	r22, 0x05	; 5
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	 DIO_write('C',6,1);
     84a:	83 e4       	ldi	r24, 0x43	; 67
     84c:	66 e0       	ldi	r22, 0x06	; 6
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	 DIO_write('C',7,1);
     854:	83 e4       	ldi	r24, 0x43	; 67
     856:	67 e0       	ldi	r22, 0x07	; 7
     858:	41 e0       	ldi	r20, 0x01	; 1
     85a:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	 DIO_vsetPINDir('D',4,0);
	 DIO_vsetPINDir('D',5,0);
	 DIO_vsetPINDir('D',6,0);
	 DIO_vsetPINDir('D',7,0);
 }
 char keypad_u8check_press()
     85e:	60 2f       	mov	r22, r16
     860:	6c 5f       	subi	r22, 0xFC	; 252
	 {
	 DIO_write('C',4,1);
	 DIO_write('C',5,1);
	 DIO_write('C',6,1);
	 DIO_write('C',7,1);
	 DIO_write('C',(row+4),0);
     862:	83 e4       	ldi	r24, 0x43	; 67
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
     86a:	10 e0       	ldi	r17, 0x00	; 0
	 DIO_vsetPINDir('D',4,0);
	 DIO_vsetPINDir('D',5,0);
	 DIO_vsetPINDir('D',6,0);
	 DIO_vsetPINDir('D',7,0);
 }
 char keypad_u8check_press()
     86c:	61 2f       	mov	r22, r17
     86e:	6c 5f       	subi	r22, 0xFC	; 252
	 DIO_write('C',7,1);
	 DIO_write('C',(row+4),0);
	
		for(coloumn=0;coloumn<4;coloumn++)
		{
		 x=DIO_u8read('D',(coloumn+4));
     870:	84 e4       	ldi	r24, 0x44	; 68
     872:	0e 94 b2 01 	call	0x364	; 0x364 <DIO_u8read>
		 if(x==0)
     876:	88 23       	and	r24, r24
     878:	61 f4       	brne	.+24     	; 0x892 <keypad_u8check_press+0x88>
			 {
			 returnval=arr[row][coloumn];
     87a:	e0 2f       	mov	r30, r16
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	ee 0f       	add	r30, r30
     880:	ff 1f       	adc	r31, r31
     882:	ee 0f       	add	r30, r30
     884:	ff 1f       	adc	r31, r31
     886:	e1 0f       	add	r30, r17
     888:	f1 1d       	adc	r31, r1
     88a:	ec 0f       	add	r30, r28
     88c:	fd 1f       	adc	r31, r29
     88e:	81 81       	ldd	r24, Z+1	; 0x01
     890:	04 c0       	rjmp	.+8      	; 0x89a <keypad_u8check_press+0x90>
	 DIO_write('C',5,1);
	 DIO_write('C',6,1);
	 DIO_write('C',7,1);
	 DIO_write('C',(row+4),0);
	
		for(coloumn=0;coloumn<4;coloumn++)
     892:	1f 5f       	subi	r17, 0xFF	; 255
     894:	14 30       	cpi	r17, 0x04	; 4
     896:	51 f7       	brne	.-44     	; 0x86c <keypad_u8check_press+0x62>
     898:	0b c0       	rjmp	.+22     	; 0x8b0 <keypad_u8check_press+0xa6>
		{
		 break;
		}
	 }	 
	 return returnval ;	 
     89a:	60 96       	adiw	r28, 0x10	; 16
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret
 char keypad_u8check_press()
 {
	 uint8 arr[4][4]={{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};
	 uint8 row,coloumn,x;
	 uint8 returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     8b0:	0f 5f       	subi	r16, 0xFF	; 255
     8b2:	04 30       	cpi	r16, 0x04	; 4
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <keypad_u8check_press+0xae>
     8b6:	bf cf       	rjmp	.-130    	; 0x836 <keypad_u8check_press+0x2c>
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	ef cf       	rjmp	.-34     	; 0x89a <keypad_u8check_press+0x90>

000008bc <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('A',EN,1);
     8bc:	81 e4       	ldi	r24, 0x41	; 65
     8be:	66 e0       	ldi	r22, 0x06	; 6
     8c0:	41 e0       	ldi	r20, 0x01	; 1
     8c2:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	8f e9       	ldi	r24, 0x9F	; 159
     8c8:	9f e0       	ldi	r25, 0x0F	; 15
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <send_falling_edge+0xe>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <send_falling_edge+0x14>
     8d0:	00 00       	nop
	_delay_ms(2);
	DIO_write('A',EN,0);
     8d2:	81 e4       	ldi	r24, 0x41	; 65
     8d4:	66 e0       	ldi	r22, 0x06	; 6
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
     8dc:	8f e9       	ldi	r24, 0x9F	; 159
     8de:	9f e0       	ldi	r25, 0x0F	; 15
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <send_falling_edge+0x24>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <send_falling_edge+0x2a>
     8e6:	00 00       	nop
	_delay_ms(2);
}
     8e8:	08 95       	ret

000008ea <LCD_vSend_char>:

void LCD_vSend_char(uint8 data)
{
     8ea:	68 2f       	mov	r22, r24
	DIO_write_port('B',data);
     8ec:	82 e4       	ldi	r24, 0x42	; 66
     8ee:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_write_port>
	DIO_write('A',RS,1);
     8f2:	81 e4       	ldi	r24, 0x41	; 65
     8f4:	67 e0       	ldi	r22, 0x07	; 7
     8f6:	41 e0       	ldi	r20, 0x01	; 1
     8f8:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	send_falling_edge();
     8fc:	0e 94 5e 04 	call	0x8bc	; 0x8bc <send_falling_edge>
     900:	8f ec       	ldi	r24, 0xCF	; 207
     902:	97 e0       	ldi	r25, 0x07	; 7
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <LCD_vSend_char+0x1a>
     908:	00 c0       	rjmp	.+0      	; 0x90a <LCD_vSend_char+0x20>
     90a:	00 00       	nop
	_delay_ms(1);
}
     90c:	08 95       	ret

0000090e <LCD_vSend_string>:


void LCD_vSend_string(uint8 *data)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     914:	88 81       	ld	r24, Y
     916:	88 23       	and	r24, r24
     918:	31 f0       	breq	.+12     	; 0x926 <LCD_vSend_string+0x18>
	send_falling_edge();
	_delay_ms(1);
}


void LCD_vSend_string(uint8 *data)
     91a:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     91c:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_vSend_char>
}


void LCD_vSend_string(uint8 *data)
{
	while((*data)!='\0')
     920:	89 91       	ld	r24, Y+
     922:	88 23       	and	r24, r24
     924:	d9 f7       	brne	.-10     	; 0x91c <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <LCD_vSend_cmd>:
	LCD_vSend_cmd(data);
	_delay_ms(1);
}

void LCD_vSend_cmd(uint8 cmd)
{
     92c:	68 2f       	mov	r22, r24
	DIO_write_port('B',cmd);
     92e:	82 e4       	ldi	r24, 0x42	; 66
     930:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_write_port>
	DIO_write('A',RS,0);
     934:	81 e4       	ldi	r24, 0x41	; 65
     936:	67 e0       	ldi	r22, 0x07	; 7
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_write>
	send_falling_edge();
     93e:	0e 94 5e 04 	call	0x8bc	; 0x8bc <send_falling_edge>
     942:	8f ec       	ldi	r24, 0xCF	; 207
     944:	97 e0       	ldi	r25, 0x07	; 7
     946:	01 97       	sbiw	r24, 0x01	; 1
     948:	f1 f7       	brne	.-4      	; 0x946 <LCD_vSend_cmd+0x1a>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <LCD_vSend_cmd+0x20>
     94c:	00 00       	nop
	_delay_ms(1);
     94e:	08 95       	ret

00000950 <LCD_movecursor>:
	_delay_ms(10);
}
void LCD_movecursor(uint8 row,uint8 coloumn)
{
	uint8 data =0x00;
	if(row>2||row<1||coloumn>16||coloumn<1)
     950:	98 2f       	mov	r25, r24
     952:	91 50       	subi	r25, 0x01	; 1
     954:	92 30       	cpi	r25, 0x02	; 2
     956:	70 f4       	brcc	.+28     	; 0x974 <LCD_movecursor+0x24>
     958:	61 31       	cpi	r22, 0x11	; 17
     95a:	70 f4       	brcc	.+28     	; 0x978 <LCD_movecursor+0x28>
     95c:	66 23       	and	r22, r22
     95e:	71 f0       	breq	.+28     	; 0x97c <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     960:	81 30       	cpi	r24, 0x01	; 1
     962:	19 f4       	brne	.+6      	; 0x96a <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     964:	86 2f       	mov	r24, r22
     966:	81 58       	subi	r24, 0x81	; 129
     968:	0c c0       	rjmp	.+24     	; 0x982 <LCD_movecursor+0x32>
	}
	else if (row==2)
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	49 f4       	brne	.+18     	; 0x980 <LCD_movecursor+0x30>
	{
		data=0xc0+coloumn-1;
     96e:	86 2f       	mov	r24, r22
     970:	81 54       	subi	r24, 0x41	; 65
     972:	07 c0       	rjmp	.+14     	; 0x982 <LCD_movecursor+0x32>
void LCD_movecursor(uint8 row,uint8 coloumn)
{
	uint8 data =0x00;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     974:	80 e8       	ldi	r24, 0x80	; 128
     976:	05 c0       	rjmp	.+10     	; 0x982 <LCD_movecursor+0x32>
     978:	80 e8       	ldi	r24, 0x80	; 128
     97a:	03 c0       	rjmp	.+6      	; 0x982 <LCD_movecursor+0x32>
     97c:	80 e8       	ldi	r24, 0x80	; 128
     97e:	01 c0       	rjmp	.+2      	; 0x982 <LCD_movecursor+0x32>
	LCD_vSend_cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_movecursor(uint8 row,uint8 coloumn)
{
	uint8 data =0x00;
     980:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     982:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     986:	8f ec       	ldi	r24, 0xCF	; 207
     988:	97 e0       	ldi	r25, 0x07	; 7
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <LCD_movecursor+0x3a>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <LCD_movecursor+0x40>
     990:	00 00       	nop
	_delay_ms(1);
}
     992:	08 95       	ret

00000994 <LCD_clearscreen>:
		data++;
	}
}
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     99a:	8f e1       	ldi	r24, 0x1F	; 31
     99c:	9e e4       	ldi	r25, 0x4E	; 78
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <LCD_clearscreen+0xa>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <LCD_clearscreen+0x10>
     9a4:	00 00       	nop
	_delay_ms(10);
}
     9a6:	08 95       	ret

000009a8 <LCD_vInit>:
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	91 ee       	ldi	r25, 0xE1	; 225
     9ac:	a4 e0       	ldi	r26, 0x04	; 4
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	a0 40       	sbci	r26, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <LCD_vInit+0x6>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <LCD_vInit+0x10>
     9b8:	00 00       	nop
#include <util/delay.h>

void LCD_vInit(void)
{
	_delay_ms(200);
	DIO_vsetPINDir('B',0,1);
     9ba:	82 e4       	ldi	r24, 0x42	; 66
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',1,1);
     9c4:	82 e4       	ldi	r24, 0x42	; 66
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',2,1);
     9ce:	82 e4       	ldi	r24, 0x42	; 66
     9d0:	62 e0       	ldi	r22, 0x02	; 2
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',3,1);
     9d8:	82 e4       	ldi	r24, 0x42	; 66
     9da:	63 e0       	ldi	r22, 0x03	; 3
     9dc:	41 e0       	ldi	r20, 0x01	; 1
     9de:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',4,1);
     9e2:	82 e4       	ldi	r24, 0x42	; 66
     9e4:	64 e0       	ldi	r22, 0x04	; 4
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
     9ec:	82 e4       	ldi	r24, 0x42	; 66
     9ee:	65 e0       	ldi	r22, 0x05	; 5
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',6,1);
     9f6:	82 e4       	ldi	r24, 0x42	; 66
     9f8:	66 e0       	ldi	r22, 0x06	; 6
     9fa:	41 e0       	ldi	r20, 0x01	; 1
     9fc:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
     a00:	82 e4       	ldi	r24, 0x42	; 66
     a02:	67 e0       	ldi	r22, 0x07	; 7
     a04:	41 e0       	ldi	r20, 0x01	; 1
     a06:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	
	DIO_vsetPINDir('A',EN,1);
     a0a:	81 e4       	ldi	r24, 0x41	; 65
     a0c:	66 e0       	ldi	r22, 0x06	; 6
     a0e:	41 e0       	ldi	r20, 0x01	; 1
     a10:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',RS,1);
     a14:	81 e4       	ldi	r24, 0x41	; 65
     a16:	67 e0       	ldi	r22, 0x07	; 7
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_vsetPINDir>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
     a1e:	88 e3       	ldi	r24, 0x38	; 56
     a20:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     a24:	af ec       	ldi	r26, 0xCF	; 207
     a26:	b7 e0       	ldi	r27, 0x07	; 7
     a28:	11 97       	sbiw	r26, 0x01	; 1
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <LCD_vInit+0x80>
     a2c:	00 c0       	rjmp	.+0      	; 0xa2e <LCD_vInit+0x86>
     a2e:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     a30:	8e e0       	ldi	r24, 0x0E	; 14
     a32:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     a36:	8f ec       	ldi	r24, 0xCF	; 207
     a38:	97 e0       	ldi	r25, 0x07	; 7
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <LCD_vInit+0x92>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <LCD_vInit+0x98>
     a40:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     a48:	af e1       	ldi	r26, 0x1F	; 31
     a4a:	be e4       	ldi	r27, 0x4E	; 78
     a4c:	11 97       	sbiw	r26, 0x01	; 1
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <LCD_vInit+0xa4>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <LCD_vInit+0xaa>
     a52:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     a54:	86 e0       	ldi	r24, 0x06	; 6
     a56:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
     a5a:	8f ec       	ldi	r24, 0xCF	; 207
     a5c:	97 e0       	ldi	r25, 0x07	; 7
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <LCD_vInit+0xb6>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <LCD_vInit+0xbc>
     a64:	00 00       	nop
	_delay_ms(1); 
}
     a66:	08 95       	ret

00000a68 <RTC_Read_Clock>:
#include "typdef.h"
#include "RTC.h"
#include "I2C_Master_H_file.h"

void RTC_Read_Clock(uint8 read_clock_address,uint8* sec, uint8* min, uint8* hou)
{
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	d8 2e       	mov	r13, r24
     a78:	eb 01       	movw	r28, r22
     a7a:	8a 01       	movw	r16, r20
     a7c:	79 01       	movw	r14, r18
	I2C_Start(RTC_Write_address);				/* Start I2C communication with RTC */
     a7e:	80 ed       	ldi	r24, 0xD0	; 208
     a80:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <I2C_Start>
	I2C_Write(read_clock_address);				/* Write address to read */
     a84:	8d 2d       	mov	r24, r13
     a86:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Repeated_Start(RTC_Read_address);		/* Repeated start with device read address */
     a8a:	81 ed       	ldi	r24, 0xD1	; 209
     a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <I2C_Repeated_Start>

	*sec = I2C_Read_Ack();						/* Read second */
     a90:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     a94:	88 83       	st	Y, r24
	*min = I2C_Read_Ack();						/* Read minute */
     a96:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     a9a:	f8 01       	movw	r30, r16
     a9c:	80 83       	st	Z, r24
	*hou = I2C_Read_Nack();						/* Read hour with Nack */
     a9e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <I2C_Read_Nack>
     aa2:	f7 01       	movw	r30, r14
     aa4:	80 83       	st	Z, r24
	I2C_Stop();									/* Stop i2C communication */
     aa6:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	08 95       	ret

00000aba <RTC_Read_Calendar>:


void RTC_Read_Calendar(uint8 read_calendar_address, uint8* dy, uint8* de, uint8* moth, uint8* yr)
{
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	98 2e       	mov	r9, r24
     ad2:	7b 01       	movw	r14, r22
     ad4:	6a 01       	movw	r12, r20
     ad6:	59 01       	movw	r10, r18
     ad8:	e8 01       	movw	r28, r16
	I2C_Start(RTC_Write_address);
     ada:	80 ed       	ldi	r24, 0xD0	; 208
     adc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <I2C_Start>
	I2C_Write(read_calendar_address);
     ae0:	89 2d       	mov	r24, r9
     ae2:	0e 94 ba 03 	call	0x774	; 0x774 <I2C_Write>
	I2C_Repeated_Start(RTC_Read_address);
     ae6:	81 ed       	ldi	r24, 0xD1	; 209
     ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <I2C_Repeated_Start>

	*dy = I2C_Read_Ack();							/* Read day */
     aec:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     af0:	f7 01       	movw	r30, r14
     af2:	80 83       	st	Z, r24
	*de = I2C_Read_Ack();							/* Read date */
     af4:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     af8:	f6 01       	movw	r30, r12
     afa:	80 83       	st	Z, r24
	*moth = I2C_Read_Ack();							/* Read month */
     afc:	0e 94 cc 03 	call	0x798	; 0x798 <I2C_Read_Ack>
     b00:	f5 01       	movw	r30, r10
     b02:	80 83       	st	Z, r24
	*yr = I2C_Read_Nack();							/* Read the year with Nack */
     b04:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <I2C_Read_Nack>
     b08:	88 83       	st	Y, r24
	I2C_Stop();										/* Stop i2C communication */
     b0a:	0e 94 96 03 	call	0x72c	; 0x72c <I2C_Stop>
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	ff 90       	pop	r15
     b18:	ef 90       	pop	r14
     b1a:	df 90       	pop	r13
     b1c:	cf 90       	pop	r12
     b1e:	bf 90       	pop	r11
     b20:	af 90       	pop	r10
     b22:	9f 90       	pop	r9
     b24:	08 95       	ret

00000b26 <print_key_num>:

/* Main Program End -------------------------------------------*/

/* Sub-program Section Start ----------------------------------*/
void print_key_num(uint8 key)
{
     b26:	cf 93       	push	r28
     b28:	c8 2f       	mov	r28, r24
	LCD_vSend_cmd(CLR_SCREEN);
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
	LCD_vSend_string("Key = ");
     b30:	80 e7       	ldi	r24, 0x70	; 112
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
	if (key <10)
     b38:	ca 30       	cpi	r28, 0x0A	; 10
     b3a:	28 f4       	brcc	.+10     	; 0xb46 <print_key_num+0x20>
	{
		LCD_vSend_char(48+key);
     b3c:	8c 2f       	mov	r24, r28
     b3e:	80 5d       	subi	r24, 0xD0	; 208
     b40:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_vSend_char>
     b44:	0c c0       	rjmp	.+24     	; 0xb5e <print_key_num+0x38>
	}
	else
	{
		LCD_vSend_char(48+(key/10));
     b46:	8c 2f       	mov	r24, r28
     b48:	6a e0       	ldi	r22, 0x0A	; 10
     b4a:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodqi4>
     b4e:	c9 2f       	mov	r28, r25
     b50:	80 5d       	subi	r24, 0xD0	; 208
     b52:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_vSend_char>
		LCD_vSend_char(48+(key%10));
     b56:	8c 2f       	mov	r24, r28
     b58:	80 5d       	subi	r24, 0xD0	; 208
     b5a:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_vSend_char>
	}
	
}
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <main>:


/* Main Program Start -----------------------------------------*/
int main(void)
{
	I2C_Init();			/* Initialize bit rate of I2C */
     b62:	0e 94 58 03 	call	0x6b0	; 0x6b0 <I2C_Init>
	LCD_vInit();		/* Initialize LCD */
     b66:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <LCD_vInit>
	keypad_vInit();		/* define keypad pins */
     b6a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <keypad_vInit>
			}
			else
			{
				/* Erase EEPROM */
				LCD_vSend_cmd(CLR_SCREEN);
				LCD_vSend_string("Clearing Mem...");
     b6e:	0f 2e       	mov	r0, r31
     b70:	fa eb       	ldi	r31, 0xBA	; 186
     b72:	8f 2e       	mov	r8, r31
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	9f 2e       	mov	r9, r31
     b78:	f0 2d       	mov	r31, r0
					memory_address+=64;
					address_low=(uint8)(memory_address);
					address_high=(uint8)(memory_address >> 8u);
				}
				LCD_vSend_cmd(CLR_SCREEN);
				LCD_vSend_string("All Data");
     b7a:	0f 2e       	mov	r0, r31
     b7c:	fa ec       	ldi	r31, 0xCA	; 202
     b7e:	6f 2e       	mov	r6, r31
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	7f 2e       	mov	r7, r31
     b84:	f0 2d       	mov	r31, r0
				LCD_movecursor(2,1);
				LCD_vSend_string("are deleted!");
     b86:	0f 2e       	mov	r0, r31
     b88:	f3 ed       	ldi	r31, 0xD3	; 211
     b8a:	4f 2e       	mov	r4, r31
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	5f 2e       	mov	r5, r31
     b90:	f0 2d       	mov	r31, r0
			else if (button_val == 15) /* button '15' is pressed -> print last key */
			{
				/* Read data from EEPROM */
				address_low = (uint8) memory_address;
				address_high = (uint8) (memory_address >> 8u);
				EEPROM_read(address_low, address_high, time_buffer);
     b92:	0f 2e       	mov	r0, r31
     b94:	f8 ee       	ldi	r31, 0xE8	; 232
     b96:	ef 2e       	mov	r14, r31
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ff 2e       	mov	r15, r31
     b9c:	f0 2d       	mov	r31, r0
				memory_address -= 6;
				address_low = (uint8) memory_address;
				address_high = (uint8) (memory_address >> 8u);
				EEPROM_read(address_low, address_high, callender_buffer);
     b9e:	0f 2e       	mov	r0, r31
     ba0:	f8 ef       	ldi	r31, 0xF8	; 248
     ba2:	cf 2e       	mov	r12, r31
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	df 2e       	mov	r13, r31
     ba8:	f0 2d       	mov	r31, r0
				memory_address -= 6;
				address_low = (uint8) memory_address;
				address_high = (uint8) (memory_address >> 8u);
				EEPROM_read(address_low, address_high, key_buffer);
     baa:	0f 2e       	mov	r0, r31
     bac:	f0 ee       	ldi	r31, 0xE0	; 224
     bae:	af 2e       	mov	r10, r31
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	bf 2e       	mov	r11, r31
     bb4:	f0 2d       	mov	r31, r0
			{
				LCD_vSend_cmd(CLR_SCREEN);
				print_key_num(button_val);
				key_buffer[0] = button_val;
				RTC_Read_Calendar(3, day, date, month, year);		/* Read the calender with day address i.e location is 3 */
				sprintf(callender_buffer, "%02x/%02x/20%02x", date, month, year);
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f7 e7       	ldi	r31, 0x77	; 119
     bba:	2f 2e       	mov	r2, r31
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	3f 2e       	mov	r3, r31
     bc0:	f0 2d       	mov	r31, r0
	keypad_vInit();		/* define keypad pins */
	uint8 button_val = 0xff; /* variable to store the pressed button value */
	
	while(1)
	{
		button_val = keypad_u8check_press(); /* read the pressed button */
     bc2:	0e 94 05 04 	call	0x80a	; 0x80a <keypad_u8check_press>
     bc6:	c8 2f       	mov	r28, r24
		if (button_val != 0xff) /* a button is pressed */
     bc8:	8f 3f       	cpi	r24, 0xFF	; 255
     bca:	09 f4       	brne	.+2      	; 0xbce <main+0x6c>
     bcc:	94 c1       	rjmp	.+808    	; 0xef6 <main+0x394>
		{
			if (button_val < 15)
     bce:	8f 30       	cpi	r24, 0x0F	; 15
     bd0:	08 f0       	brcs	.+2      	; 0xbd4 <main+0x72>
     bd2:	f7 c0       	rjmp	.+494    	; 0xdc2 <main+0x260>
			{
				LCD_vSend_cmd(CLR_SCREEN);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				print_key_num(button_val);
     bda:	8c 2f       	mov	r24, r28
     bdc:	0e 94 93 05 	call	0xb26	; 0xb26 <print_key_num>
				key_buffer[0] = button_val;
     be0:	d5 01       	movw	r26, r10
     be2:	cc 93       	st	X, r28
				RTC_Read_Calendar(3, day, date, month, year);		/* Read the calender with day address i.e location is 3 */
     be4:	60 91 02 01 	lds	r22, 0x0102
     be8:	70 91 03 01 	lds	r23, 0x0103
     bec:	40 91 04 01 	lds	r20, 0x0104
     bf0:	50 91 05 01 	lds	r21, 0x0105
     bf4:	20 91 e6 00 	lds	r18, 0x00E6
     bf8:	30 91 e7 00 	lds	r19, 0x00E7
     bfc:	00 91 fe 00 	lds	r16, 0x00FE
     c00:	10 91 ff 00 	lds	r17, 0x00FF
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	0e 94 5d 05 	call	0xaba	; 0xaba <RTC_Read_Calendar>
				sprintf(callender_buffer, "%02x/%02x/20%02x", date, month, year);
     c0a:	ed b7       	in	r30, 0x3d	; 61
     c0c:	fe b7       	in	r31, 0x3e	; 62
     c0e:	3a 97       	sbiw	r30, 0x0a	; 10
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	fe bf       	out	0x3e, r31	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	ed bf       	out	0x3d, r30	; 61
     c1a:	31 96       	adiw	r30, 0x01	; 1
     c1c:	ad b7       	in	r26, 0x3d	; 61
     c1e:	be b7       	in	r27, 0x3e	; 62
     c20:	12 96       	adiw	r26, 0x02	; 2
     c22:	dc 92       	st	X, r13
     c24:	ce 92       	st	-X, r12
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	33 82       	std	Z+3, r3	; 0x03
     c2a:	22 82       	std	Z+2, r2	; 0x02
     c2c:	80 91 04 01 	lds	r24, 0x0104
     c30:	90 91 05 01 	lds	r25, 0x0105
     c34:	95 83       	std	Z+5, r25	; 0x05
     c36:	84 83       	std	Z+4, r24	; 0x04
     c38:	80 91 e6 00 	lds	r24, 0x00E6
     c3c:	90 91 e7 00 	lds	r25, 0x00E7
     c40:	97 83       	std	Z+7, r25	; 0x07
     c42:	86 83       	std	Z+6, r24	; 0x06
     c44:	80 91 fe 00 	lds	r24, 0x00FE
     c48:	90 91 ff 00 	lds	r25, 0x00FF
     c4c:	91 87       	std	Z+9, r25	; 0x09
     c4e:	80 87       	std	Z+8, r24	; 0x08
     c50:	0e 94 91 07 	call	0xf22	; 0xf22 <sprintf>
				RTC_Read_Clock(0, second, minute, hour);		/* Read the clock with second address i.e location is 0 */
     c54:	ed b7       	in	r30, 0x3d	; 61
     c56:	fe b7       	in	r31, 0x3e	; 62
     c58:	3a 96       	adiw	r30, 0x0a	; 10
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	fe bf       	out	0x3e, r31	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	ed bf       	out	0x3d, r30	; 61
     c64:	60 91 ee 00 	lds	r22, 0x00EE
     c68:	70 91 ef 00 	lds	r23, 0x00EF
     c6c:	40 91 f0 00 	lds	r20, 0x00F0
     c70:	50 91 f1 00 	lds	r21, 0x00F1
     c74:	20 91 f3 00 	lds	r18, 0x00F3
     c78:	30 91 f4 00 	lds	r19, 0x00F4
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 34 05 	call	0xa68	; 0xa68 <RTC_Read_Clock>
				sprintf(time_buffer, "%02x:%02x:%02x", (hour & 0b00011111), minute, second);
     c82:	8d b7       	in	r24, 0x3d	; 61
     c84:	9e b7       	in	r25, 0x3e	; 62
     c86:	0a 97       	sbiw	r24, 0x0a	; 10
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	9e bf       	out	0x3e, r25	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	8d bf       	out	0x3d, r24	; 61
     c92:	ed b7       	in	r30, 0x3d	; 61
     c94:	fe b7       	in	r31, 0x3e	; 62
     c96:	31 96       	adiw	r30, 0x01	; 1
     c98:	ad b7       	in	r26, 0x3d	; 61
     c9a:	be b7       	in	r27, 0x3e	; 62
     c9c:	12 96       	adiw	r26, 0x02	; 2
     c9e:	fc 92       	st	X, r15
     ca0:	ee 92       	st	-X, r14
     ca2:	11 97       	sbiw	r26, 0x01	; 1
     ca4:	88 e8       	ldi	r24, 0x88	; 136
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	93 83       	std	Z+3, r25	; 0x03
     caa:	82 83       	std	Z+2, r24	; 0x02
     cac:	80 91 f3 00 	lds	r24, 0x00F3
     cb0:	90 91 f4 00 	lds	r25, 0x00F4
     cb4:	8f 71       	andi	r24, 0x1F	; 31
     cb6:	90 70       	andi	r25, 0x00	; 0
     cb8:	95 83       	std	Z+5, r25	; 0x05
     cba:	84 83       	std	Z+4, r24	; 0x04
     cbc:	80 91 f0 00 	lds	r24, 0x00F0
     cc0:	90 91 f1 00 	lds	r25, 0x00F1
     cc4:	97 83       	std	Z+7, r25	; 0x07
     cc6:	86 83       	std	Z+6, r24	; 0x06
     cc8:	80 91 ee 00 	lds	r24, 0x00EE
     ccc:	90 91 ef 00 	lds	r25, 0x00EF
     cd0:	91 87       	std	Z+9, r25	; 0x09
     cd2:	80 87       	std	Z+8, r24	; 0x08
     cd4:	0e 94 91 07 	call	0xf22	; 0xf22 <sprintf>
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	93 ed       	ldi	r25, 0xD3	; 211
     cdc:	a0 e3       	ldi	r26, 0x30	; 48
     cde:	81 50       	subi	r24, 0x01	; 1
     ce0:	90 40       	sbci	r25, 0x00	; 0
     ce2:	a0 40       	sbci	r26, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <main+0x17c>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <main+0x186>
     ce8:	00 00       	nop
				_delay_ms(2000); /* display key number for 2 secs */
				
				/* now print date and time of press */
				LCD_vSend_cmd(CLR_SCREEN);
     cea:	ad b7       	in	r26, 0x3d	; 61
     cec:	be b7       	in	r27, 0x3e	; 62
     cee:	1a 96       	adiw	r26, 0x0a	; 10
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	be bf       	out	0x3e, r27	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	ad bf       	out	0x3d, r26	; 61
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				LCD_vSend_string("Date");
     d00:	87 e9       	ldi	r24, 0x97	; 151
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_vSend_string(callender_buffer);
     d08:	c6 01       	movw	r24, r12
     d0a:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_movecursor(2,1);
     d0e:	82 e0       	ldi	r24, 0x02	; 2
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_movecursor>
				LCD_vSend_string("Time");
     d16:	8c e9       	ldi	r24, 0x9C	; 156
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_vSend_string(time_buffer);
     d1e:	c7 01       	movw	r24, r14
     d20:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
     d24:	ef e0       	ldi	r30, 0x0F	; 15
     d26:	f7 e2       	ldi	r31, 0x27	; 39
     d28:	31 97       	sbiw	r30, 0x01	; 1
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <main+0x1c6>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <main+0x1cc>
     d2e:	00 00       	nop
				_delay_ms(5);
				EEPROM_write(address_low, address_high, key_buffer);
     d30:	80 91 f5 00 	lds	r24, 0x00F5
     d34:	60 91 f6 00 	lds	r22, 0x00F6
     d38:	a5 01       	movw	r20, r10
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
     d3e:	8f e0       	ldi	r24, 0x0F	; 15
     d40:	97 e2       	ldi	r25, 0x27	; 39
     d42:	01 97       	sbiw	r24, 0x01	; 1
     d44:	f1 f7       	brne	.-4      	; 0xd42 <main+0x1e0>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <main+0x1e6>
     d48:	00 00       	nop
				_delay_ms(5);
				memory_address += 6;
     d4a:	80 91 00 01 	lds	r24, 0x0100
     d4e:	90 91 01 01 	lds	r25, 0x0101
     d52:	06 96       	adiw	r24, 0x06	; 6
     d54:	90 93 01 01 	sts	0x0101, r25
     d58:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     d5c:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     d60:	90 93 f6 00 	sts	0x00F6, r25
				EEPROM_write(address_low, address_high, callender_buffer);
     d64:	69 2f       	mov	r22, r25
     d66:	a6 01       	movw	r20, r12
     d68:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
     d6c:	af e0       	ldi	r26, 0x0F	; 15
     d6e:	b7 e2       	ldi	r27, 0x27	; 39
     d70:	11 97       	sbiw	r26, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <main+0x20e>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <main+0x214>
     d76:	00 00       	nop
				_delay_ms(5);
				memory_address += 6;
     d78:	80 91 00 01 	lds	r24, 0x0100
     d7c:	90 91 01 01 	lds	r25, 0x0101
     d80:	06 96       	adiw	r24, 0x06	; 6
     d82:	90 93 01 01 	sts	0x0101, r25
     d86:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     d8a:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     d8e:	90 93 f6 00 	sts	0x00F6, r25
				EEPROM_write(address_low, address_high, time_buffer);
     d92:	69 2f       	mov	r22, r25
     d94:	a7 01       	movw	r20, r14
     d96:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_write>
     d9a:	ef e0       	ldi	r30, 0x0F	; 15
     d9c:	f7 e2       	ldi	r31, 0x27	; 39
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <main+0x23c>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <main+0x242>
     da4:	00 00       	nop
				_delay_ms(5);
				memory_address += 6;
     da6:	80 91 00 01 	lds	r24, 0x0100
     daa:	90 91 01 01 	lds	r25, 0x0101
     dae:	06 96       	adiw	r24, 0x06	; 6
     db0:	90 93 01 01 	sts	0x0101, r25
     db4:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     db8:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     dbc:	90 93 f6 00 	sts	0x00F6, r25
     dc0:	9a c0       	rjmp	.+308    	; 0xef6 <main+0x394>
			}
			else if (button_val == 15) /* button '15' is pressed -> print last key */
     dc2:	8f 30       	cpi	r24, 0x0F	; 15
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <main+0x266>
     dc6:	58 c0       	rjmp	.+176    	; 0xe78 <main+0x316>
			{
				/* Read data from EEPROM */
				address_low = (uint8) memory_address;
     dc8:	80 91 00 01 	lds	r24, 0x0100
     dcc:	60 91 01 01 	lds	r22, 0x0101
     dd0:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     dd4:	60 93 f6 00 	sts	0x00F6, r22
				EEPROM_read(address_low, address_high, time_buffer);
     dd8:	a7 01       	movw	r20, r14
     dda:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_read>
				memory_address -= 6;
     dde:	80 91 00 01 	lds	r24, 0x0100
     de2:	90 91 01 01 	lds	r25, 0x0101
     de6:	06 97       	sbiw	r24, 0x06	; 6
     de8:	90 93 01 01 	sts	0x0101, r25
     dec:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     df0:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     df4:	90 93 f6 00 	sts	0x00F6, r25
				EEPROM_read(address_low, address_high, callender_buffer);
     df8:	69 2f       	mov	r22, r25
     dfa:	a6 01       	movw	r20, r12
     dfc:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_read>
				memory_address -= 6;
     e00:	80 91 00 01 	lds	r24, 0x0100
     e04:	90 91 01 01 	lds	r25, 0x0101
     e08:	06 97       	sbiw	r24, 0x06	; 6
     e0a:	90 93 01 01 	sts	0x0101, r25
     e0e:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     e12:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     e16:	90 93 f6 00 	sts	0x00F6, r25
				EEPROM_read(address_low, address_high, key_buffer);
     e1a:	69 2f       	mov	r22, r25
     e1c:	a5 01       	movw	r20, r10
     e1e:	0e 94 82 00 	call	0x104	; 0x104 <EEPROM_read>
				/* print the restored data on LCD */
				LCD_vSend_cmd(CLR_SCREEN);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				LCD_vSend_string("Last key is=");
     e28:	81 ea       	ldi	r24, 0xA1	; 161
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_vSend_char(key_buffer[0]+48);
     e30:	d5 01       	movw	r26, r10
     e32:	8c 91       	ld	r24, X
     e34:	80 5d       	subi	r24, 0xD0	; 208
     e36:	0e 94 75 04 	call	0x8ea	; 0x8ea <LCD_vSend_char>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	93 ed       	ldi	r25, 0xD3	; 211
     e3e:	a0 e3       	ldi	r26, 0x30	; 48
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	a0 40       	sbci	r26, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <main+0x2de>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <main+0x2e8>
     e4a:	00 00       	nop
				_delay_ms(2000); /* display key number for 2 secs */
				LCD_vSend_cmd(CLR_SCREEN);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				LCD_vSend_string("Date=");
     e52:	8e ea       	ldi	r24, 0xAE	; 174
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_vSend_string(callender_buffer);
     e5a:	c6 01       	movw	r24, r12
     e5c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_movecursor(2,1);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_movecursor>
				LCD_vSend_string("Time=");
     e68:	84 eb       	ldi	r24, 0xB4	; 180
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_vSend_string(time_buffer);
     e70:	c7 01       	movw	r24, r14
     e72:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <main+0x394>
			}
			else
			{
				/* Erase EEPROM */
				LCD_vSend_cmd(CLR_SCREEN);
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				LCD_vSend_string("Clearing Mem...");
     e7e:	c4 01       	movw	r24, r8
     e80:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				memory_address = 0xff;
     e84:	8f ef       	ldi	r24, 0xFF	; 255
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	90 93 01 01 	sts	0x0101, r25
     e8c:	80 93 00 01 	sts	0x0100, r24
				address_low = (uint8) memory_address;
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	80 93 f5 00 	sts	0x00F5, r24
				address_high = (uint8) (memory_address >> 8u);
     e96:	10 92 f6 00 	sts	0x00F6, r1
     e9a:	c5 e6       	ldi	r28, 0x65	; 101
     e9c:	d6 e0       	ldi	r29, 0x06	; 6
				uint16 page=0;
				for (page=0; page<1637; page++)
				{
					EEPROM_Erase_all_data(address_low, address_high);
     e9e:	80 91 f5 00 	lds	r24, 0x00F5
     ea2:	60 91 f6 00 	lds	r22, 0x00F6
     ea6:	0e 94 6a 00 	call	0xd4	; 0xd4 <EEPROM_Erase_all_data>
     eaa:	8f ef       	ldi	r24, 0xFF	; 255
     eac:	90 e7       	ldi	r25, 0x70	; 112
     eae:	a2 e0       	ldi	r26, 0x02	; 2
     eb0:	81 50       	subi	r24, 0x01	; 1
     eb2:	90 40       	sbci	r25, 0x00	; 0
     eb4:	a0 40       	sbci	r26, 0x00	; 0
     eb6:	e1 f7       	brne	.-8      	; 0xeb0 <main+0x34e>
     eb8:	00 c0       	rjmp	.+0      	; 0xeba <main+0x358>
     eba:	00 00       	nop
					_delay_ms(100);
					memory_address+=64;
     ebc:	80 91 00 01 	lds	r24, 0x0100
     ec0:	90 91 01 01 	lds	r25, 0x0101
     ec4:	80 5c       	subi	r24, 0xC0	; 192
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	90 93 01 01 	sts	0x0101, r25
     ecc:	80 93 00 01 	sts	0x0100, r24
					address_low=(uint8)(memory_address);
     ed0:	80 93 f5 00 	sts	0x00F5, r24
					address_high=(uint8)(memory_address >> 8u);
     ed4:	90 93 f6 00 	sts	0x00F6, r25
     ed8:	21 97       	sbiw	r28, 0x01	; 1
				LCD_vSend_string("Clearing Mem...");
				memory_address = 0xff;
				address_low = (uint8) memory_address;
				address_high = (uint8) (memory_address >> 8u);
				uint16 page=0;
				for (page=0; page<1637; page++)
     eda:	09 f7       	brne	.-62     	; 0xe9e <main+0x33c>
					_delay_ms(100);
					memory_address+=64;
					address_low=(uint8)(memory_address);
					address_high=(uint8)(memory_address >> 8u);
				}
				LCD_vSend_cmd(CLR_SCREEN);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	0e 94 96 04 	call	0x92c	; 0x92c <LCD_vSend_cmd>
				LCD_vSend_string("All Data");
     ee2:	c3 01       	movw	r24, r6
     ee4:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
				LCD_movecursor(2,1);
     ee8:	82 e0       	ldi	r24, 0x02	; 2
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	0e 94 a8 04 	call	0x950	; 0x950 <LCD_movecursor>
				LCD_vSend_string("are deleted!");
     ef0:	c2 01       	movw	r24, r4
     ef2:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_vSend_string>
     ef6:	8f e7       	ldi	r24, 0x7F	; 127
     ef8:	9a e1       	ldi	r25, 0x1A	; 26
     efa:	a6 e0       	ldi	r26, 0x06	; 6
     efc:	81 50       	subi	r24, 0x01	; 1
     efe:	90 40       	sbci	r25, 0x00	; 0
     f00:	a0 40       	sbci	r26, 0x00	; 0
     f02:	e1 f7       	brne	.-8      	; 0xefc <main+0x39a>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <main+0x3a4>
     f06:	00 00       	nop
     f08:	5c ce       	rjmp	.-840    	; 0xbc2 <main+0x60>

00000f0a <__udivmodqi4>:
     f0a:	99 1b       	sub	r25, r25
     f0c:	79 e0       	ldi	r23, 0x09	; 9
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <__udivmodqi4_ep>

00000f10 <__udivmodqi4_loop>:
     f10:	99 1f       	adc	r25, r25
     f12:	96 17       	cp	r25, r22
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__udivmodqi4_ep>
     f16:	96 1b       	sub	r25, r22

00000f18 <__udivmodqi4_ep>:
     f18:	88 1f       	adc	r24, r24
     f1a:	7a 95       	dec	r23
     f1c:	c9 f7       	brne	.-14     	; 0xf10 <__udivmodqi4_loop>
     f1e:	80 95       	com	r24
     f20:	08 95       	ret

00000f22 <sprintf>:
     f22:	ae e0       	ldi	r26, 0x0E	; 14
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e9       	ldi	r30, 0x97	; 151
     f28:	f7 e0       	ldi	r31, 0x07	; 7
     f2a:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <__prologue_saves__+0x1c>
     f2e:	0d 89       	ldd	r16, Y+21	; 0x15
     f30:	1e 89       	ldd	r17, Y+22	; 0x16
     f32:	86 e0       	ldi	r24, 0x06	; 6
     f34:	8c 83       	std	Y+4, r24	; 0x04
     f36:	1a 83       	std	Y+2, r17	; 0x02
     f38:	09 83       	std	Y+1, r16	; 0x01
     f3a:	8f ef       	ldi	r24, 0xFF	; 255
     f3c:	9f e7       	ldi	r25, 0x7F	; 127
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	ae 01       	movw	r20, r28
     f44:	47 5e       	subi	r20, 0xE7	; 231
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	6f 89       	ldd	r22, Y+23	; 0x17
     f4e:	78 8d       	ldd	r23, Y+24	; 0x18
     f50:	0e 94 b3 07 	call	0xf66	; 0xf66 <vfprintf>
     f54:	ef 81       	ldd	r30, Y+7	; 0x07
     f56:	f8 85       	ldd	r31, Y+8	; 0x08
     f58:	e0 0f       	add	r30, r16
     f5a:	f1 1f       	adc	r31, r17
     f5c:	10 82       	st	Z, r1
     f5e:	2e 96       	adiw	r28, 0x0e	; 14
     f60:	e4 e0       	ldi	r30, 0x04	; 4
     f62:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__epilogue_restores__+0x1c>

00000f66 <vfprintf>:
     f66:	ad e0       	ldi	r26, 0x0D	; 13
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e9 eb       	ldi	r30, 0xB9	; 185
     f6c:	f7 e0       	ldi	r31, 0x07	; 7
     f6e:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__prologue_saves__>
     f72:	3c 01       	movw	r6, r24
     f74:	7d 87       	std	Y+13, r23	; 0x0d
     f76:	6c 87       	std	Y+12, r22	; 0x0c
     f78:	5a 01       	movw	r10, r20
     f7a:	fc 01       	movw	r30, r24
     f7c:	17 82       	std	Z+7, r1	; 0x07
     f7e:	16 82       	std	Z+6, r1	; 0x06
     f80:	83 81       	ldd	r24, Z+3	; 0x03
     f82:	81 ff       	sbrs	r24, 1
     f84:	c8 c1       	rjmp	.+912    	; 0x1316 <vfprintf+0x3b0>
     f86:	2e 01       	movw	r4, r28
     f88:	08 94       	sec
     f8a:	41 1c       	adc	r4, r1
     f8c:	51 1c       	adc	r5, r1
     f8e:	f3 01       	movw	r30, r6
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	ec 85       	ldd	r30, Y+12	; 0x0c
     f94:	fd 85       	ldd	r31, Y+13	; 0x0d
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	fd 87       	std	Y+13, r31	; 0x0d
     fa0:	ec 87       	std	Y+12, r30	; 0x0c
     fa2:	88 23       	and	r24, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <vfprintf+0x42>
     fa6:	b3 c1       	rjmp	.+870    	; 0x130e <vfprintf+0x3a8>
     fa8:	85 32       	cpi	r24, 0x25	; 37
     faa:	41 f4       	brne	.+16     	; 0xfbc <vfprintf+0x56>
     fac:	93 fd       	sbrc	r25, 3
     fae:	85 91       	lpm	r24, Z+
     fb0:	93 ff       	sbrs	r25, 3
     fb2:	81 91       	ld	r24, Z+
     fb4:	fd 87       	std	Y+13, r31	; 0x0d
     fb6:	ec 87       	std	Y+12, r30	; 0x0c
     fb8:	85 32       	cpi	r24, 0x25	; 37
     fba:	29 f4       	brne	.+10     	; 0xfc6 <vfprintf+0x60>
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	b3 01       	movw	r22, r6
     fc0:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
     fc4:	e4 cf       	rjmp	.-56     	; 0xf8e <vfprintf+0x28>
     fc6:	ff 24       	eor	r15, r15
     fc8:	ee 24       	eor	r14, r14
     fca:	10 e0       	ldi	r17, 0x00	; 0
     fcc:	10 32       	cpi	r17, 0x20	; 32
     fce:	b0 f4       	brcc	.+44     	; 0xffc <vfprintf+0x96>
     fd0:	8b 32       	cpi	r24, 0x2B	; 43
     fd2:	69 f0       	breq	.+26     	; 0xfee <vfprintf+0x88>
     fd4:	8c 32       	cpi	r24, 0x2C	; 44
     fd6:	28 f4       	brcc	.+10     	; 0xfe2 <vfprintf+0x7c>
     fd8:	80 32       	cpi	r24, 0x20	; 32
     fda:	51 f0       	breq	.+20     	; 0xff0 <vfprintf+0x8a>
     fdc:	83 32       	cpi	r24, 0x23	; 35
     fde:	71 f4       	brne	.+28     	; 0xffc <vfprintf+0x96>
     fe0:	0b c0       	rjmp	.+22     	; 0xff8 <vfprintf+0x92>
     fe2:	8d 32       	cpi	r24, 0x2D	; 45
     fe4:	39 f0       	breq	.+14     	; 0xff4 <vfprintf+0x8e>
     fe6:	80 33       	cpi	r24, 0x30	; 48
     fe8:	49 f4       	brne	.+18     	; 0xffc <vfprintf+0x96>
     fea:	11 60       	ori	r17, 0x01	; 1
     fec:	2c c0       	rjmp	.+88     	; 0x1046 <vfprintf+0xe0>
     fee:	12 60       	ori	r17, 0x02	; 2
     ff0:	14 60       	ori	r17, 0x04	; 4
     ff2:	29 c0       	rjmp	.+82     	; 0x1046 <vfprintf+0xe0>
     ff4:	18 60       	ori	r17, 0x08	; 8
     ff6:	27 c0       	rjmp	.+78     	; 0x1046 <vfprintf+0xe0>
     ff8:	10 61       	ori	r17, 0x10	; 16
     ffa:	25 c0       	rjmp	.+74     	; 0x1046 <vfprintf+0xe0>
     ffc:	17 fd       	sbrc	r17, 7
     ffe:	2e c0       	rjmp	.+92     	; 0x105c <vfprintf+0xf6>
    1000:	28 2f       	mov	r18, r24
    1002:	20 53       	subi	r18, 0x30	; 48
    1004:	2a 30       	cpi	r18, 0x0A	; 10
    1006:	98 f4       	brcc	.+38     	; 0x102e <vfprintf+0xc8>
    1008:	16 ff       	sbrs	r17, 6
    100a:	08 c0       	rjmp	.+16     	; 0x101c <vfprintf+0xb6>
    100c:	8f 2d       	mov	r24, r15
    100e:	88 0f       	add	r24, r24
    1010:	f8 2e       	mov	r15, r24
    1012:	ff 0c       	add	r15, r15
    1014:	ff 0c       	add	r15, r15
    1016:	f8 0e       	add	r15, r24
    1018:	f2 0e       	add	r15, r18
    101a:	15 c0       	rjmp	.+42     	; 0x1046 <vfprintf+0xe0>
    101c:	8e 2d       	mov	r24, r14
    101e:	88 0f       	add	r24, r24
    1020:	e8 2e       	mov	r14, r24
    1022:	ee 0c       	add	r14, r14
    1024:	ee 0c       	add	r14, r14
    1026:	e8 0e       	add	r14, r24
    1028:	e2 0e       	add	r14, r18
    102a:	10 62       	ori	r17, 0x20	; 32
    102c:	0c c0       	rjmp	.+24     	; 0x1046 <vfprintf+0xe0>
    102e:	8e 32       	cpi	r24, 0x2E	; 46
    1030:	21 f4       	brne	.+8      	; 0x103a <vfprintf+0xd4>
    1032:	16 fd       	sbrc	r17, 6
    1034:	6c c1       	rjmp	.+728    	; 0x130e <vfprintf+0x3a8>
    1036:	10 64       	ori	r17, 0x40	; 64
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <vfprintf+0xe0>
    103a:	8c 36       	cpi	r24, 0x6C	; 108
    103c:	11 f4       	brne	.+4      	; 0x1042 <vfprintf+0xdc>
    103e:	10 68       	ori	r17, 0x80	; 128
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0xe0>
    1042:	88 36       	cpi	r24, 0x68	; 104
    1044:	59 f4       	brne	.+22     	; 0x105c <vfprintf+0xf6>
    1046:	ec 85       	ldd	r30, Y+12	; 0x0c
    1048:	fd 85       	ldd	r31, Y+13	; 0x0d
    104a:	93 fd       	sbrc	r25, 3
    104c:	85 91       	lpm	r24, Z+
    104e:	93 ff       	sbrs	r25, 3
    1050:	81 91       	ld	r24, Z+
    1052:	fd 87       	std	Y+13, r31	; 0x0d
    1054:	ec 87       	std	Y+12, r30	; 0x0c
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <vfprintf+0xf6>
    105a:	b8 cf       	rjmp	.-144    	; 0xfcc <vfprintf+0x66>
    105c:	98 2f       	mov	r25, r24
    105e:	95 54       	subi	r25, 0x45	; 69
    1060:	93 30       	cpi	r25, 0x03	; 3
    1062:	18 f0       	brcs	.+6      	; 0x106a <vfprintf+0x104>
    1064:	90 52       	subi	r25, 0x20	; 32
    1066:	93 30       	cpi	r25, 0x03	; 3
    1068:	38 f4       	brcc	.+14     	; 0x1078 <vfprintf+0x112>
    106a:	24 e0       	ldi	r18, 0x04	; 4
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	a2 0e       	add	r10, r18
    1070:	b3 1e       	adc	r11, r19
    1072:	3f e3       	ldi	r19, 0x3F	; 63
    1074:	39 83       	std	Y+1, r19	; 0x01
    1076:	0f c0       	rjmp	.+30     	; 0x1096 <vfprintf+0x130>
    1078:	83 36       	cpi	r24, 0x63	; 99
    107a:	31 f0       	breq	.+12     	; 0x1088 <vfprintf+0x122>
    107c:	83 37       	cpi	r24, 0x73	; 115
    107e:	81 f0       	breq	.+32     	; 0x10a0 <vfprintf+0x13a>
    1080:	83 35       	cpi	r24, 0x53	; 83
    1082:	09 f0       	breq	.+2      	; 0x1086 <vfprintf+0x120>
    1084:	5a c0       	rjmp	.+180    	; 0x113a <vfprintf+0x1d4>
    1086:	22 c0       	rjmp	.+68     	; 0x10cc <vfprintf+0x166>
    1088:	f5 01       	movw	r30, r10
    108a:	80 81       	ld	r24, Z
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	22 e0       	ldi	r18, 0x02	; 2
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	a2 0e       	add	r10, r18
    1094:	b3 1e       	adc	r11, r19
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	c2 2e       	mov	r12, r18
    109a:	d1 2c       	mov	r13, r1
    109c:	42 01       	movw	r8, r4
    109e:	14 c0       	rjmp	.+40     	; 0x10c8 <vfprintf+0x162>
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	29 2e       	mov	r2, r25
    10a4:	31 2c       	mov	r3, r1
    10a6:	2a 0c       	add	r2, r10
    10a8:	3b 1c       	adc	r3, r11
    10aa:	f5 01       	movw	r30, r10
    10ac:	80 80       	ld	r8, Z
    10ae:	91 80       	ldd	r9, Z+1	; 0x01
    10b0:	16 ff       	sbrs	r17, 6
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <vfprintf+0x154>
    10b4:	6f 2d       	mov	r22, r15
    10b6:	70 e0       	ldi	r23, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <vfprintf+0x158>
    10ba:	6f ef       	ldi	r22, 0xFF	; 255
    10bc:	7f ef       	ldi	r23, 0xFF	; 255
    10be:	c4 01       	movw	r24, r8
    10c0:	0e 94 9c 09 	call	0x1338	; 0x1338 <strnlen>
    10c4:	6c 01       	movw	r12, r24
    10c6:	51 01       	movw	r10, r2
    10c8:	1f 77       	andi	r17, 0x7F	; 127
    10ca:	15 c0       	rjmp	.+42     	; 0x10f6 <vfprintf+0x190>
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	28 2e       	mov	r2, r24
    10d0:	31 2c       	mov	r3, r1
    10d2:	2a 0c       	add	r2, r10
    10d4:	3b 1c       	adc	r3, r11
    10d6:	f5 01       	movw	r30, r10
    10d8:	80 80       	ld	r8, Z
    10da:	91 80       	ldd	r9, Z+1	; 0x01
    10dc:	16 ff       	sbrs	r17, 6
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <vfprintf+0x180>
    10e0:	6f 2d       	mov	r22, r15
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <vfprintf+0x184>
    10e6:	6f ef       	ldi	r22, 0xFF	; 255
    10e8:	7f ef       	ldi	r23, 0xFF	; 255
    10ea:	c4 01       	movw	r24, r8
    10ec:	0e 94 91 09 	call	0x1322	; 0x1322 <strnlen_P>
    10f0:	6c 01       	movw	r12, r24
    10f2:	10 68       	ori	r17, 0x80	; 128
    10f4:	51 01       	movw	r10, r2
    10f6:	13 fd       	sbrc	r17, 3
    10f8:	1c c0       	rjmp	.+56     	; 0x1132 <vfprintf+0x1cc>
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <vfprintf+0x1a2>
    10fc:	80 e2       	ldi	r24, 0x20	; 32
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b3 01       	movw	r22, r6
    1102:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    1106:	ea 94       	dec	r14
    1108:	8e 2d       	mov	r24, r14
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	c8 16       	cp	r12, r24
    110e:	d9 06       	cpc	r13, r25
    1110:	a8 f3       	brcs	.-22     	; 0x10fc <vfprintf+0x196>
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <vfprintf+0x1cc>
    1114:	f4 01       	movw	r30, r8
    1116:	17 fd       	sbrc	r17, 7
    1118:	85 91       	lpm	r24, Z+
    111a:	17 ff       	sbrs	r17, 7
    111c:	81 91       	ld	r24, Z+
    111e:	4f 01       	movw	r8, r30
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	b3 01       	movw	r22, r6
    1124:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    1128:	e1 10       	cpse	r14, r1
    112a:	ea 94       	dec	r14
    112c:	08 94       	sec
    112e:	c1 08       	sbc	r12, r1
    1130:	d1 08       	sbc	r13, r1
    1132:	c1 14       	cp	r12, r1
    1134:	d1 04       	cpc	r13, r1
    1136:	71 f7       	brne	.-36     	; 0x1114 <vfprintf+0x1ae>
    1138:	e7 c0       	rjmp	.+462    	; 0x1308 <vfprintf+0x3a2>
    113a:	84 36       	cpi	r24, 0x64	; 100
    113c:	11 f0       	breq	.+4      	; 0x1142 <vfprintf+0x1dc>
    113e:	89 36       	cpi	r24, 0x69	; 105
    1140:	51 f5       	brne	.+84     	; 0x1196 <vfprintf+0x230>
    1142:	f5 01       	movw	r30, r10
    1144:	17 ff       	sbrs	r17, 7
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <vfprintf+0x1f0>
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	a2 81       	ldd	r26, Z+2	; 0x02
    114e:	b3 81       	ldd	r27, Z+3	; 0x03
    1150:	24 e0       	ldi	r18, 0x04	; 4
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	08 c0       	rjmp	.+16     	; 0x1166 <vfprintf+0x200>
    1156:	80 81       	ld	r24, Z
    1158:	91 81       	ldd	r25, Z+1	; 0x01
    115a:	aa 27       	eor	r26, r26
    115c:	97 fd       	sbrc	r25, 7
    115e:	a0 95       	com	r26
    1160:	ba 2f       	mov	r27, r26
    1162:	22 e0       	ldi	r18, 0x02	; 2
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	a2 0e       	add	r10, r18
    1168:	b3 1e       	adc	r11, r19
    116a:	01 2f       	mov	r16, r17
    116c:	0f 76       	andi	r16, 0x6F	; 111
    116e:	b7 ff       	sbrs	r27, 7
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <vfprintf+0x21c>
    1172:	b0 95       	com	r27
    1174:	a0 95       	com	r26
    1176:	90 95       	com	r25
    1178:	81 95       	neg	r24
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	af 4f       	sbci	r26, 0xFF	; 255
    117e:	bf 4f       	sbci	r27, 0xFF	; 255
    1180:	00 68       	ori	r16, 0x80	; 128
    1182:	bc 01       	movw	r22, r24
    1184:	cd 01       	movw	r24, r26
    1186:	a2 01       	movw	r20, r4
    1188:	2a e0       	ldi	r18, 0x0A	; 10
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    1190:	d8 2e       	mov	r13, r24
    1192:	d4 18       	sub	r13, r4
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <vfprintf+0x2ae>
    1196:	85 37       	cpi	r24, 0x75	; 117
    1198:	21 f4       	brne	.+8      	; 0x11a2 <vfprintf+0x23c>
    119a:	1f 7e       	andi	r17, 0xEF	; 239
    119c:	2a e0       	ldi	r18, 0x0A	; 10
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	20 c0       	rjmp	.+64     	; 0x11e2 <vfprintf+0x27c>
    11a2:	19 7f       	andi	r17, 0xF9	; 249
    11a4:	8f 36       	cpi	r24, 0x6F	; 111
    11a6:	a9 f0       	breq	.+42     	; 0x11d2 <vfprintf+0x26c>
    11a8:	80 37       	cpi	r24, 0x70	; 112
    11aa:	20 f4       	brcc	.+8      	; 0x11b4 <vfprintf+0x24e>
    11ac:	88 35       	cpi	r24, 0x58	; 88
    11ae:	09 f0       	breq	.+2      	; 0x11b2 <vfprintf+0x24c>
    11b0:	ae c0       	rjmp	.+348    	; 0x130e <vfprintf+0x3a8>
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <vfprintf+0x264>
    11b4:	80 37       	cpi	r24, 0x70	; 112
    11b6:	21 f0       	breq	.+8      	; 0x11c0 <vfprintf+0x25a>
    11b8:	88 37       	cpi	r24, 0x78	; 120
    11ba:	09 f0       	breq	.+2      	; 0x11be <vfprintf+0x258>
    11bc:	a8 c0       	rjmp	.+336    	; 0x130e <vfprintf+0x3a8>
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <vfprintf+0x25c>
    11c0:	10 61       	ori	r17, 0x10	; 16
    11c2:	14 ff       	sbrs	r17, 4
    11c4:	09 c0       	rjmp	.+18     	; 0x11d8 <vfprintf+0x272>
    11c6:	14 60       	ori	r17, 0x04	; 4
    11c8:	07 c0       	rjmp	.+14     	; 0x11d8 <vfprintf+0x272>
    11ca:	14 ff       	sbrs	r17, 4
    11cc:	08 c0       	rjmp	.+16     	; 0x11de <vfprintf+0x278>
    11ce:	16 60       	ori	r17, 0x06	; 6
    11d0:	06 c0       	rjmp	.+12     	; 0x11de <vfprintf+0x278>
    11d2:	28 e0       	ldi	r18, 0x08	; 8
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	05 c0       	rjmp	.+10     	; 0x11e2 <vfprintf+0x27c>
    11d8:	20 e1       	ldi	r18, 0x10	; 16
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <vfprintf+0x27c>
    11de:	20 e1       	ldi	r18, 0x10	; 16
    11e0:	32 e0       	ldi	r19, 0x02	; 2
    11e2:	f5 01       	movw	r30, r10
    11e4:	17 ff       	sbrs	r17, 7
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <vfprintf+0x290>
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	44 e0       	ldi	r20, 0x04	; 4
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	06 c0       	rjmp	.+12     	; 0x1202 <vfprintf+0x29c>
    11f6:	60 81       	ld	r22, Z
    11f8:	71 81       	ldd	r23, Z+1	; 0x01
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	42 e0       	ldi	r20, 0x02	; 2
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	a4 0e       	add	r10, r20
    1204:	b5 1e       	adc	r11, r21
    1206:	a2 01       	movw	r20, r4
    1208:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    120c:	d8 2e       	mov	r13, r24
    120e:	d4 18       	sub	r13, r4
    1210:	01 2f       	mov	r16, r17
    1212:	0f 77       	andi	r16, 0x7F	; 127
    1214:	06 ff       	sbrs	r16, 6
    1216:	09 c0       	rjmp	.+18     	; 0x122a <vfprintf+0x2c4>
    1218:	0e 7f       	andi	r16, 0xFE	; 254
    121a:	df 14       	cp	r13, r15
    121c:	30 f4       	brcc	.+12     	; 0x122a <vfprintf+0x2c4>
    121e:	04 ff       	sbrs	r16, 4
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x2c8>
    1222:	02 fd       	sbrc	r16, 2
    1224:	04 c0       	rjmp	.+8      	; 0x122e <vfprintf+0x2c8>
    1226:	0f 7e       	andi	r16, 0xEF	; 239
    1228:	02 c0       	rjmp	.+4      	; 0x122e <vfprintf+0x2c8>
    122a:	1d 2d       	mov	r17, r13
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x2ca>
    122e:	1f 2d       	mov	r17, r15
    1230:	80 2f       	mov	r24, r16
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	04 ff       	sbrs	r16, 4
    1236:	0c c0       	rjmp	.+24     	; 0x1250 <vfprintf+0x2ea>
    1238:	fe 01       	movw	r30, r28
    123a:	ed 0d       	add	r30, r13
    123c:	f1 1d       	adc	r31, r1
    123e:	20 81       	ld	r18, Z
    1240:	20 33       	cpi	r18, 0x30	; 48
    1242:	11 f4       	brne	.+4      	; 0x1248 <vfprintf+0x2e2>
    1244:	09 7e       	andi	r16, 0xE9	; 233
    1246:	09 c0       	rjmp	.+18     	; 0x125a <vfprintf+0x2f4>
    1248:	02 ff       	sbrs	r16, 2
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <vfprintf+0x2f2>
    124c:	1e 5f       	subi	r17, 0xFE	; 254
    124e:	05 c0       	rjmp	.+10     	; 0x125a <vfprintf+0x2f4>
    1250:	86 78       	andi	r24, 0x86	; 134
    1252:	90 70       	andi	r25, 0x00	; 0
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	09 f0       	breq	.+2      	; 0x125a <vfprintf+0x2f4>
    1258:	1f 5f       	subi	r17, 0xFF	; 255
    125a:	80 2e       	mov	r8, r16
    125c:	99 24       	eor	r9, r9
    125e:	03 fd       	sbrc	r16, 3
    1260:	12 c0       	rjmp	.+36     	; 0x1286 <vfprintf+0x320>
    1262:	00 ff       	sbrs	r16, 0
    1264:	0d c0       	rjmp	.+26     	; 0x1280 <vfprintf+0x31a>
    1266:	fd 2c       	mov	r15, r13
    1268:	1e 15       	cp	r17, r14
    126a:	50 f4       	brcc	.+20     	; 0x1280 <vfprintf+0x31a>
    126c:	fe 0c       	add	r15, r14
    126e:	f1 1a       	sub	r15, r17
    1270:	1e 2d       	mov	r17, r14
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <vfprintf+0x31a>
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	b3 01       	movw	r22, r6
    127a:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    127e:	1f 5f       	subi	r17, 0xFF	; 255
    1280:	1e 15       	cp	r17, r14
    1282:	c0 f3       	brcs	.-16     	; 0x1274 <vfprintf+0x30e>
    1284:	04 c0       	rjmp	.+8      	; 0x128e <vfprintf+0x328>
    1286:	1e 15       	cp	r17, r14
    1288:	10 f4       	brcc	.+4      	; 0x128e <vfprintf+0x328>
    128a:	e1 1a       	sub	r14, r17
    128c:	01 c0       	rjmp	.+2      	; 0x1290 <vfprintf+0x32a>
    128e:	ee 24       	eor	r14, r14
    1290:	84 fe       	sbrs	r8, 4
    1292:	0f c0       	rjmp	.+30     	; 0x12b2 <vfprintf+0x34c>
    1294:	80 e3       	ldi	r24, 0x30	; 48
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	b3 01       	movw	r22, r6
    129a:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    129e:	82 fe       	sbrs	r8, 2
    12a0:	1f c0       	rjmp	.+62     	; 0x12e0 <vfprintf+0x37a>
    12a2:	81 fe       	sbrs	r8, 1
    12a4:	03 c0       	rjmp	.+6      	; 0x12ac <vfprintf+0x346>
    12a6:	88 e5       	ldi	r24, 0x58	; 88
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	10 c0       	rjmp	.+32     	; 0x12cc <vfprintf+0x366>
    12ac:	88 e7       	ldi	r24, 0x78	; 120
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <vfprintf+0x366>
    12b2:	c4 01       	movw	r24, r8
    12b4:	86 78       	andi	r24, 0x86	; 134
    12b6:	90 70       	andi	r25, 0x00	; 0
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	91 f0       	breq	.+36     	; 0x12e0 <vfprintf+0x37a>
    12bc:	81 fc       	sbrc	r8, 1
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0x35e>
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <vfprintf+0x360>
    12c4:	8b e2       	ldi	r24, 0x2B	; 43
    12c6:	07 fd       	sbrc	r16, 7
    12c8:	8d e2       	ldi	r24, 0x2D	; 45
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	b3 01       	movw	r22, r6
    12ce:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12d2:	06 c0       	rjmp	.+12     	; 0x12e0 <vfprintf+0x37a>
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	b3 01       	movw	r22, r6
    12da:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12de:	fa 94       	dec	r15
    12e0:	df 14       	cp	r13, r15
    12e2:	c0 f3       	brcs	.-16     	; 0x12d4 <vfprintf+0x36e>
    12e4:	da 94       	dec	r13
    12e6:	f2 01       	movw	r30, r4
    12e8:	ed 0d       	add	r30, r13
    12ea:	f1 1d       	adc	r31, r1
    12ec:	80 81       	ld	r24, Z
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	b3 01       	movw	r22, r6
    12f2:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12f6:	dd 20       	and	r13, r13
    12f8:	a9 f7       	brne	.-22     	; 0x12e4 <vfprintf+0x37e>
    12fa:	06 c0       	rjmp	.+12     	; 0x1308 <vfprintf+0x3a2>
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	b3 01       	movw	r22, r6
    1302:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    1306:	ea 94       	dec	r14
    1308:	ee 20       	and	r14, r14
    130a:	c1 f7       	brne	.-16     	; 0x12fc <vfprintf+0x396>
    130c:	40 ce       	rjmp	.-896    	; 0xf8e <vfprintf+0x28>
    130e:	f3 01       	movw	r30, r6
    1310:	86 81       	ldd	r24, Z+6	; 0x06
    1312:	97 81       	ldd	r25, Z+7	; 0x07
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0x3b4>
    1316:	8f ef       	ldi	r24, 0xFF	; 255
    1318:	9f ef       	ldi	r25, 0xFF	; 255
    131a:	2d 96       	adiw	r28, 0x0d	; 13
    131c:	e2 e1       	ldi	r30, 0x12	; 18
    131e:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__epilogue_restores__>

00001322 <strnlen_P>:
    1322:	fc 01       	movw	r30, r24
    1324:	05 90       	lpm	r0, Z+
    1326:	61 50       	subi	r22, 0x01	; 1
    1328:	70 40       	sbci	r23, 0x00	; 0
    132a:	01 10       	cpse	r0, r1
    132c:	d8 f7       	brcc	.-10     	; 0x1324 <strnlen_P+0x2>
    132e:	80 95       	com	r24
    1330:	90 95       	com	r25
    1332:	8e 0f       	add	r24, r30
    1334:	9f 1f       	adc	r25, r31
    1336:	08 95       	ret

00001338 <strnlen>:
    1338:	fc 01       	movw	r30, r24
    133a:	61 50       	subi	r22, 0x01	; 1
    133c:	70 40       	sbci	r23, 0x00	; 0
    133e:	01 90       	ld	r0, Z+
    1340:	01 10       	cpse	r0, r1
    1342:	d8 f7       	brcc	.-10     	; 0x133a <strnlen+0x2>
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	8e 0f       	add	r24, r30
    134a:	9f 1f       	adc	r25, r31
    134c:	08 95       	ret

0000134e <fputc>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	8c 01       	movw	r16, r24
    1358:	eb 01       	movw	r28, r22
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	81 ff       	sbrs	r24, 1
    135e:	1b c0       	rjmp	.+54     	; 0x1396 <fputc+0x48>
    1360:	82 ff       	sbrs	r24, 2
    1362:	0d c0       	rjmp	.+26     	; 0x137e <fputc+0x30>
    1364:	2e 81       	ldd	r18, Y+6	; 0x06
    1366:	3f 81       	ldd	r19, Y+7	; 0x07
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	64 f4       	brge	.+24     	; 0x138a <fputc+0x3c>
    1372:	e8 81       	ld	r30, Y
    1374:	f9 81       	ldd	r31, Y+1	; 0x01
    1376:	01 93       	st	Z+, r16
    1378:	f9 83       	std	Y+1, r31	; 0x01
    137a:	e8 83       	st	Y, r30
    137c:	06 c0       	rjmp	.+12     	; 0x138a <fputc+0x3c>
    137e:	e8 85       	ldd	r30, Y+8	; 0x08
    1380:	f9 85       	ldd	r31, Y+9	; 0x09
    1382:	80 2f       	mov	r24, r16
    1384:	09 95       	icall
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f4       	brne	.+12     	; 0x1396 <fputc+0x48>
    138a:	8e 81       	ldd	r24, Y+6	; 0x06
    138c:	9f 81       	ldd	r25, Y+7	; 0x07
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	9f 83       	std	Y+7, r25	; 0x07
    1392:	8e 83       	std	Y+6, r24	; 0x06
    1394:	02 c0       	rjmp	.+4      	; 0x139a <fputc+0x4c>
    1396:	0f ef       	ldi	r16, 0xFF	; 255
    1398:	1f ef       	ldi	r17, 0xFF	; 255
    139a:	c8 01       	movw	r24, r16
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <__ultoa_invert>:
    13a6:	fa 01       	movw	r30, r20
    13a8:	aa 27       	eor	r26, r26
    13aa:	28 30       	cpi	r18, 0x08	; 8
    13ac:	51 f1       	breq	.+84     	; 0x1402 <__ultoa_invert+0x5c>
    13ae:	20 31       	cpi	r18, 0x10	; 16
    13b0:	81 f1       	breq	.+96     	; 0x1412 <__ultoa_invert+0x6c>
    13b2:	e8 94       	clt
    13b4:	6f 93       	push	r22
    13b6:	6e 7f       	andi	r22, 0xFE	; 254
    13b8:	6e 5f       	subi	r22, 0xFE	; 254
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	af 4f       	sbci	r26, 0xFF	; 255
    13c2:	b1 e0       	ldi	r27, 0x01	; 1
    13c4:	3e d0       	rcall	.+124    	; 0x1442 <__ultoa_invert+0x9c>
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	3c d0       	rcall	.+120    	; 0x1442 <__ultoa_invert+0x9c>
    13ca:	67 0f       	add	r22, r23
    13cc:	78 1f       	adc	r23, r24
    13ce:	89 1f       	adc	r24, r25
    13d0:	9a 1f       	adc	r25, r26
    13d2:	a1 1d       	adc	r26, r1
    13d4:	68 0f       	add	r22, r24
    13d6:	79 1f       	adc	r23, r25
    13d8:	8a 1f       	adc	r24, r26
    13da:	91 1d       	adc	r25, r1
    13dc:	a1 1d       	adc	r26, r1
    13de:	6a 0f       	add	r22, r26
    13e0:	71 1d       	adc	r23, r1
    13e2:	81 1d       	adc	r24, r1
    13e4:	91 1d       	adc	r25, r1
    13e6:	a1 1d       	adc	r26, r1
    13e8:	20 d0       	rcall	.+64     	; 0x142a <__ultoa_invert+0x84>
    13ea:	09 f4       	brne	.+2      	; 0x13ee <__ultoa_invert+0x48>
    13ec:	68 94       	set
    13ee:	3f 91       	pop	r19
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	26 9f       	mul	r18, r22
    13f4:	11 24       	eor	r1, r1
    13f6:	30 19       	sub	r19, r0
    13f8:	30 5d       	subi	r19, 0xD0	; 208
    13fa:	31 93       	st	Z+, r19
    13fc:	de f6       	brtc	.-74     	; 0x13b4 <__ultoa_invert+0xe>
    13fe:	cf 01       	movw	r24, r30
    1400:	08 95       	ret
    1402:	46 2f       	mov	r20, r22
    1404:	47 70       	andi	r20, 0x07	; 7
    1406:	40 5d       	subi	r20, 0xD0	; 208
    1408:	41 93       	st	Z+, r20
    140a:	b3 e0       	ldi	r27, 0x03	; 3
    140c:	0f d0       	rcall	.+30     	; 0x142c <__ultoa_invert+0x86>
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0x5c>
    1410:	f6 cf       	rjmp	.-20     	; 0x13fe <__ultoa_invert+0x58>
    1412:	46 2f       	mov	r20, r22
    1414:	4f 70       	andi	r20, 0x0F	; 15
    1416:	40 5d       	subi	r20, 0xD0	; 208
    1418:	4a 33       	cpi	r20, 0x3A	; 58
    141a:	18 f0       	brcs	.+6      	; 0x1422 <__ultoa_invert+0x7c>
    141c:	49 5d       	subi	r20, 0xD9	; 217
    141e:	31 fd       	sbrc	r19, 1
    1420:	40 52       	subi	r20, 0x20	; 32
    1422:	41 93       	st	Z+, r20
    1424:	02 d0       	rcall	.+4      	; 0x142a <__ultoa_invert+0x84>
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__ultoa_invert+0x6c>
    1428:	ea cf       	rjmp	.-44     	; 0x13fe <__ultoa_invert+0x58>
    142a:	b4 e0       	ldi	r27, 0x04	; 4
    142c:	a6 95       	lsr	r26
    142e:	97 95       	ror	r25
    1430:	87 95       	ror	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	ba 95       	dec	r27
    1438:	c9 f7       	brne	.-14     	; 0x142c <__ultoa_invert+0x86>
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 05       	cpc	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	08 95       	ret
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	0a 2e       	mov	r0, r26
    1448:	06 94       	lsr	r0
    144a:	57 95       	ror	r21
    144c:	47 95       	ror	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	ba 95       	dec	r27
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__ultoa_invert+0xa2>
    1456:	62 0f       	add	r22, r18
    1458:	73 1f       	adc	r23, r19
    145a:	84 1f       	adc	r24, r20
    145c:	95 1f       	adc	r25, r21
    145e:	a0 1d       	adc	r26, r0
    1460:	08 95       	ret

00001462 <__prologue_saves__>:
    1462:	2f 92       	push	r2
    1464:	3f 92       	push	r3
    1466:	4f 92       	push	r4
    1468:	5f 92       	push	r5
    146a:	6f 92       	push	r6
    146c:	7f 92       	push	r7
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	af 92       	push	r10
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	cd b7       	in	r28, 0x3d	; 61
    1488:	de b7       	in	r29, 0x3e	; 62
    148a:	ca 1b       	sub	r28, r26
    148c:	db 0b       	sbc	r29, r27
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	09 94       	ijmp

0000149a <__epilogue_restores__>:
    149a:	2a 88       	ldd	r2, Y+18	; 0x12
    149c:	39 88       	ldd	r3, Y+17	; 0x11
    149e:	48 88       	ldd	r4, Y+16	; 0x10
    14a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    14a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    14a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    14a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    14aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ac:	b9 84       	ldd	r11, Y+9	; 0x09
    14ae:	c8 84       	ldd	r12, Y+8	; 0x08
    14b0:	df 80       	ldd	r13, Y+7	; 0x07
    14b2:	ee 80       	ldd	r14, Y+6	; 0x06
    14b4:	fd 80       	ldd	r15, Y+5	; 0x05
    14b6:	0c 81       	ldd	r16, Y+4	; 0x04
    14b8:	1b 81       	ldd	r17, Y+3	; 0x03
    14ba:	aa 81       	ldd	r26, Y+2	; 0x02
    14bc:	b9 81       	ldd	r27, Y+1	; 0x01
    14be:	ce 0f       	add	r28, r30
    14c0:	d1 1d       	adc	r29, r1
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	de bf       	out	0x3e, r29	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	cd bf       	out	0x3d, r28	; 61
    14cc:	ed 01       	movw	r28, r26
    14ce:	08 95       	ret

000014d0 <_exit>:
    14d0:	f8 94       	cli

000014d2 <__stop_program>:
    14d2:	ff cf       	rjmp	.-2      	; 0x14d2 <__stop_program>
